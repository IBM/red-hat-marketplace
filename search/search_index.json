{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Red Hat Marketplace Jumpstart Workshop \u00b6 Red Hat Marketplace is a one-stop-shop to find, try, buy, deploy, and manage enterprise applications across an organization\u2019s hybrid IT infrastructure, including on-premises and multicloud environments. Red Hat Marketplace gives developers a streamlined view of software that is certified to work in Kubernetes container environments and minimizes red tape for developer managers. The goals of this workshop are: Familiarize with the best-of-breed toolset to simplify Cloud Native application development on OpenShift. Use Red Hat Marketplace to streamline the consumption and usage of containerized software in a hybrid cloud infrastructure. Enterprises who have started their cloud journey and looking at ways to optimize their developer and operational experience will greatly benefit from this workshop. Prerequisites \u00b6 Required: Working knowledge of containers and container orchestration with Kubernetes. Workstation or laptop with latest version Chrome or Firefox. Desired: Knowledge of Kubernetes extensions and operators. Experience with software trials and purchases. Agenda \u00b6 Lecture 1: Introduction (20 minutes) What is Red Hat Marketplace? Demo (40 minutes) Explore the features and value of using Marketplace Break (10 minutes) Exercise: Onboarding account (20 minutes) Account setup Exercise: Cluster setup (20 minutes) Cluster setup Exercise: Software trials (30 minutes) Consuming certified software. Lecture 2: Cloud Development Toolset (20 minutes) Cloud native development toolset for OpenShift. Lunch Break (60 minutes) Lecture 3: CodeReady Workspaces (20 minutes) Developer experience with CodeReady Workspaces (CRW) Exercise: Exploring CodeReady Workspaces (30 minutes) Development with Codeready workspaces. Exercise: CRW with Devfiles (30 minutes) Customizing Codeready workspaces. Exercise: Sharing Workspaces (20 minutes) Reuse workspaces across projects. Break (10 minutes) Lecture 4: Runtimes & Stacks (20 minutes) OpenShift Runtimes and Application Stacks Exercise: S2I & Templates (30 minutes) Lecture 5: CI/CD with OpenShift Pipelines (20 minutes) OpenShift Runtimes and Application Stacks Exercise: Deploy with pipelines (30 minutes) Deploying application with customized stack and pipelines Break (10 minutes) Demo: Distributed tracing (20 minutes) Deploy ELK stack for centralized logging from Marketplace catalog Compatability \u00b6 This workshop has been tested on the following platforms: OpenShift 4.4 on IBM Cloud, OpenShift 4.5 on AWS macOS : Mojave \\(10.14\\) , Catalina \\(10.15\\) , latest version Chrome & Firefox. Credits \u00b6 Oliver Rodriguez Amy Smathers","title":"Introduction"},{"location":"#red-hat-marketplace-jumpstart-workshop","text":"Red Hat Marketplace is a one-stop-shop to find, try, buy, deploy, and manage enterprise applications across an organization\u2019s hybrid IT infrastructure, including on-premises and multicloud environments. Red Hat Marketplace gives developers a streamlined view of software that is certified to work in Kubernetes container environments and minimizes red tape for developer managers. The goals of this workshop are: Familiarize with the best-of-breed toolset to simplify Cloud Native application development on OpenShift. Use Red Hat Marketplace to streamline the consumption and usage of containerized software in a hybrid cloud infrastructure. Enterprises who have started their cloud journey and looking at ways to optimize their developer and operational experience will greatly benefit from this workshop.","title":"Red Hat Marketplace Jumpstart Workshop"},{"location":"#prerequisites","text":"Required: Working knowledge of containers and container orchestration with Kubernetes. Workstation or laptop with latest version Chrome or Firefox. Desired: Knowledge of Kubernetes extensions and operators. Experience with software trials and purchases.","title":"Prerequisites"},{"location":"#agenda","text":"Lecture 1: Introduction (20 minutes) What is Red Hat Marketplace? Demo (40 minutes) Explore the features and value of using Marketplace Break (10 minutes) Exercise: Onboarding account (20 minutes) Account setup Exercise: Cluster setup (20 minutes) Cluster setup Exercise: Software trials (30 minutes) Consuming certified software. Lecture 2: Cloud Development Toolset (20 minutes) Cloud native development toolset for OpenShift. Lunch Break (60 minutes) Lecture 3: CodeReady Workspaces (20 minutes) Developer experience with CodeReady Workspaces (CRW) Exercise: Exploring CodeReady Workspaces (30 minutes) Development with Codeready workspaces. Exercise: CRW with Devfiles (30 minutes) Customizing Codeready workspaces. Exercise: Sharing Workspaces (20 minutes) Reuse workspaces across projects. Break (10 minutes) Lecture 4: Runtimes & Stacks (20 minutes) OpenShift Runtimes and Application Stacks Exercise: S2I & Templates (30 minutes) Lecture 5: CI/CD with OpenShift Pipelines (20 minutes) OpenShift Runtimes and Application Stacks Exercise: Deploy with pipelines (30 minutes) Deploying application with customized stack and pipelines Break (10 minutes) Demo: Distributed tracing (20 minutes) Deploy ELK stack for centralized logging from Marketplace catalog","title":"Agenda"},{"location":"#compatability","text":"This workshop has been tested on the following platforms: OpenShift 4.4 on IBM Cloud, OpenShift 4.5 on AWS macOS : Mojave \\(10.14\\) , Catalina \\(10.15\\) , latest version Chrome & Firefox.","title":"Compatability"},{"location":"#credits","text":"Oliver Rodriguez Amy Smathers","title":"Credits"},{"location":"SUMMARY/","text":"Table of contents \u00b6 Introduction Getting Started \u00b6 Pre-work Introduction \u00b6 Red Hat Marketplace Marketplace Onboarding Account setup Cluster setup Software trials Database MongoDB PostgreSQL CockroachDB AI/ML Cortex Certifai EDDI Dev Tools Red Hat Runtimes CodeReady Workspaces OpenShift Pipelines Joget Workflow Cloud Developer Toolset \u00b6 CodeReady Workspaces Lab 0: Pre-work Lab 1: Explore CRW Lab 2: Customize with Devfiles Lab 4: Sharing Workspaces CodeReady Containers Lab 0: Pre-work Lab 1: Explore CRC Lab 2: RHM with CRC Lab 3: Odo + CRC Runtimes & Deployment \u00b6 Stacks & Runtimes Pre-work Lab 1: S2I & Templates Lab 2: Deploy with Crunchy PostgreSQL CodeReady Toolchains Pre-work Lab 3: Explore Toolchain Lab 4: CI/CD with RHM Workshop Resources \u00b6 Instructor Guide Resources \u00b6 IBM Developer Articles \u00b6 RHM QuickStart Using CodeReady Containers with Marketplace Using CodeReady Containers with Marketplace (with CLI)","title":"Table of contents"},{"location":"SUMMARY/#table-of-contents","text":"Introduction","title":"Table of contents"},{"location":"SUMMARY/#getting-started","text":"Pre-work","title":"Getting Started"},{"location":"SUMMARY/#introduction","text":"Red Hat Marketplace Marketplace Onboarding Account setup Cluster setup Software trials Database MongoDB PostgreSQL CockroachDB AI/ML Cortex Certifai EDDI Dev Tools Red Hat Runtimes CodeReady Workspaces OpenShift Pipelines Joget Workflow","title":"Introduction"},{"location":"SUMMARY/#cloud-developer-toolset","text":"CodeReady Workspaces Lab 0: Pre-work Lab 1: Explore CRW Lab 2: Customize with Devfiles Lab 4: Sharing Workspaces CodeReady Containers Lab 0: Pre-work Lab 1: Explore CRC Lab 2: RHM with CRC Lab 3: Odo + CRC","title":"Cloud Developer Toolset"},{"location":"SUMMARY/#runtimes-deployment","text":"Stacks & Runtimes Pre-work Lab 1: S2I & Templates Lab 2: Deploy with Crunchy PostgreSQL CodeReady Toolchains Pre-work Lab 3: Explore Toolchain Lab 4: CI/CD with RHM","title":"Runtimes &amp; Deployment"},{"location":"SUMMARY/#workshop-resources","text":"Instructor Guide","title":"Workshop Resources"},{"location":"SUMMARY/#resources","text":"IBM Developer","title":"Resources"},{"location":"SUMMARY/#articles","text":"RHM QuickStart Using CodeReady Containers with Marketplace Using CodeReady Containers with Marketplace (with CLI)","title":"Articles"},{"location":"articles/cloud-toolset/cloud-toolset/","text":"Cloud Development Tool set \u00b6 Introduction to the broad set of tools and technologies available to developers for their Cloud development projects. IDE choices along with supported plugins for OpenShift. Using development toolkits and runtimes. The CodeReady Portfolio \u00b6 Hosted Development Environment \u00b6 CodeReady Workspaces \u00b6 (CodeReady Workspaces]( https://developers.redhat.com/products/codeready-workspaces/overview ) is a collaborative Kubernetes-native development solution that delivers OpenShift workspaces and in-browser IDE for rapid cloud application development. Local Development Environment \u00b6 IDEs and Extensions \u00b6 Deploy and Runtimes \u00b6 CodeReady Containers and CDK \u00b6 CodeReady Containers brings a minimal, preconfigured OpenShift 4.1 or newer cluster to your local laptop or desktop computer for development and testing purposes. CodeReady Containers is delivered as a Red Hat Enterprise Linux virtual machine that supports native hypervisors for Linux, macOS, and Windows 10. Installing CRC odo \u00b6 odo is a fast, iterative CLI for developers who write, build, and deploy applications on OpenShift. Odo is an open source project. It has a simple, extensible syntax that includes on-the-fly interactive help to construct the appropriate options for your commands. Odo consolidates a series of separate steps to deploy your apps and make modifications. It can automatically check to ensure these changes have been correctly implemented and use the correct syntax. It replaces the oc command-line interface which required a deeper knowledge of OpenShift. Odo also uses the source-to-image (S2I) open-source project to automatically create container images from your source code with a single command line sequence, which automates and consolidates a series of previous manual steps. OpenShift Serverless \u00b6 DevOps and Security \u00b6 OpenShift Pipelines \u00b6 CodeReady Toolchain \u00b6 Open development services for creating, building and testing container applications. Red Hat CodeReady Toolchain is a set of open services that can be used separately or together. We will be adding new services to CodeReady Toolchain in the coming months. Most services are available as SaaS or can be deployed to your own private OpenShift install. CODE - Use a Kube-native IDE powered by Eclipse Che: Free sign-up for hosted Eclipse Che Download CodeReady Workspaces for your OpenShift Download the Eclipse Che project for any Kubernetes ANALYZE - Find security and license issues in your code: Use as Hosted Eclipse cache-control Get the VS Code extension Get the Eclipse Desktop IDE plugin SCAFFOLD - New microservices applications with a wizard: Use the free service Get the VS Code extension Dependecy Analytics \u00b6","title":"Cloud Development Tool set"},{"location":"articles/cloud-toolset/cloud-toolset/#cloud-development-tool-set","text":"Introduction to the broad set of tools and technologies available to developers for their Cloud development projects. IDE choices along with supported plugins for OpenShift. Using development toolkits and runtimes.","title":"Cloud Development Tool set"},{"location":"articles/cloud-toolset/cloud-toolset/#the-codeready-portfolio","text":"","title":"The CodeReady Portfolio"},{"location":"articles/cloud-toolset/cloud-toolset/#hosted-development-environment","text":"","title":"Hosted Development Environment"},{"location":"articles/cloud-toolset/cloud-toolset/#codeready-workspaces","text":"(CodeReady Workspaces]( https://developers.redhat.com/products/codeready-workspaces/overview ) is a collaborative Kubernetes-native development solution that delivers OpenShift workspaces and in-browser IDE for rapid cloud application development.","title":"CodeReady Workspaces"},{"location":"articles/cloud-toolset/cloud-toolset/#local-development-environment","text":"","title":"Local Development Environment"},{"location":"articles/cloud-toolset/cloud-toolset/#ides-and-extensions","text":"","title":"IDEs and Extensions"},{"location":"articles/cloud-toolset/cloud-toolset/#deploy-and-runtimes","text":"","title":"Deploy and Runtimes"},{"location":"articles/cloud-toolset/cloud-toolset/#codeready-containers-and-cdk","text":"CodeReady Containers brings a minimal, preconfigured OpenShift 4.1 or newer cluster to your local laptop or desktop computer for development and testing purposes. CodeReady Containers is delivered as a Red Hat Enterprise Linux virtual machine that supports native hypervisors for Linux, macOS, and Windows 10. Installing CRC","title":"CodeReady Containers and CDK"},{"location":"articles/cloud-toolset/cloud-toolset/#odo","text":"odo is a fast, iterative CLI for developers who write, build, and deploy applications on OpenShift. Odo is an open source project. It has a simple, extensible syntax that includes on-the-fly interactive help to construct the appropriate options for your commands. Odo consolidates a series of separate steps to deploy your apps and make modifications. It can automatically check to ensure these changes have been correctly implemented and use the correct syntax. It replaces the oc command-line interface which required a deeper knowledge of OpenShift. Odo also uses the source-to-image (S2I) open-source project to automatically create container images from your source code with a single command line sequence, which automates and consolidates a series of previous manual steps.","title":"odo"},{"location":"articles/cloud-toolset/cloud-toolset/#openshift-serverless","text":"","title":"OpenShift Serverless"},{"location":"articles/cloud-toolset/cloud-toolset/#devops-and-security","text":"","title":"DevOps and Security"},{"location":"articles/cloud-toolset/cloud-toolset/#openshift-pipelines","text":"","title":"OpenShift Pipelines"},{"location":"articles/cloud-toolset/cloud-toolset/#codeready-toolchain","text":"Open development services for creating, building and testing container applications. Red Hat CodeReady Toolchain is a set of open services that can be used separately or together. We will be adding new services to CodeReady Toolchain in the coming months. Most services are available as SaaS or can be deployed to your own private OpenShift install. CODE - Use a Kube-native IDE powered by Eclipse Che: Free sign-up for hosted Eclipse Che Download CodeReady Workspaces for your OpenShift Download the Eclipse Che project for any Kubernetes ANALYZE - Find security and license issues in your code: Use as Hosted Eclipse cache-control Get the VS Code extension Get the Eclipse Desktop IDE plugin SCAFFOLD - New microservices applications with a wizard: Use the free service Get the VS Code extension","title":"CodeReady Toolchain"},{"location":"articles/cloud-toolset/cloud-toolset/#dependecy-analytics","text":"","title":"Dependecy Analytics"},{"location":"articles/quickstart/rhm-quickstart-roks-long/","text":"RHM QuickStart \u00b6 Goals of any developers in the Hybrid Cloud world is in creating solutions, quickly, that enable enterprises to react to evolving ecosystems. Red Hat Marketplace offers a unified experience to purchase containerized software from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using the OpenShift Container Platform, monitor software spend, track license usage and expirations. This article will walk through the process of account registration, cluster setup and software trial through Red Hat Marketplace. Setup Marketplace account \u00b6 Go to Red Hat Marketplace to view the catalog of containerized software ready to install into your OpenShift cluster. If you have an existing IBM ID or Red Hat ID , start by clicking the Login link provided at the top right corner of the page. Otherwise, click on the Create account button if you do not have one. \\(The Create account process will provision an IBM ID.\\) Fill in the information requested at the registration page. For Account type, select Company if you are registering the account for business purposes, else select Personal. Click Next. Payment options can be setup with either a credit card or an invoice. Using the invoice option requires you to have an IBM Customer number and a Purchase order number . Click Next and complete the registration. Add OpenShift cluster \u00b6 OpenShift clusters must be added to your Marketplace workspace prior to deploying your choice of software. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private as long as the cluster can communicate with the Marketplace server. Prerequisites \u00b6 OpenShift Cluster: For this article we have chosen to use a managed OpenShift cluster on IBM cloud. If you do not have a cluster, create one by following this link. Pick OpenShift version 4.3 or higher. Deployment Key: A deployment key is required to link your OpenShift cluster to the marketplace. Select the drop down from the top right corner and go to My Account page. Note that this page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys and then click on Create key . Copy the key and save it in a secure place for later use prior to clicking the Save button. Now, let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequisites \\([CLIs](https://cloud.ibm.com/docs/openshift?topic=openshift-openshift-cli#cli_oc) and [jq](https://stedolan.github.io/jq/download/)\\) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. Note that account-id and cluster-uuid is prepopulated. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> You should see the following output on a successful completion: ================================================================================== [INFO] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1/6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2/6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3/6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4/6: Applying global pull secret... secret/pull-secret data updated STEP 5/6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6/6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page with the status as Registered . \\(wait 15 minutes for the registration to complete if the status shows Agent not installed \\) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step - if your cluster is running on IBM Cloud then run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluster id and node names. Reload worker? [kube-bqegbk1w00v8gmbt37l0-rhmtestcluster-default-000001d8] [y/N]> y Reloading workers for cluster rhm-test-cluster... Processing kube-bqegbk1w00v8gmbt37l0-rhmtestcluster-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rhmtestcluster-default-000001d8 complete. Now you are ready to try any software from the catalog! Reach out to the Marketplace technical support if you encounter an error and need assistnace to resolve the issue. Try software \u00b6 Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for CockroachDB . Select the CockraochDB tile. The CockraochDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project cockroachdb-test Select the CockraochDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as cockroachdb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project cockroachdb-test . Create dabase instance \u00b6 From the installed Operators page for CockroachDB, click on the link CockroachDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] CockroachDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1/1 Running 0 46m example-cockroachdb-0 1/1 Running 0 36m example-cockroachdb-1 1/1 Running 0 36m example-cockroachdb-2 1/1 Running 0 36m example-cockroachdb-init-l5m56 0/1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a CockroachDB client. kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test $ kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test If you don't see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-cockroachdb-0 8080 $ kubectl port-forward example-cockroachdb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-cockroachdb-public.cockroachdb-test.svc.cluster.local If you run into problems installing the operator or working with any products and have exhausted provided self-help options, the central support triage team is ready and available to assist as needed. Go to https://marketplace.redhat.com/en-us/support and submit a support case with product and problem details. Conclusion \u00b6 In the follow-on series, we will dive deeper into how Marketplace helps you rapidly take an idea from a proof-of-concept or pilot to a production scale application. You will also get to see the benefits of having a single place to manage the software consumption for your hybrid cloud applications.","title":"RHM QuickStart"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#rhm-quickstart","text":"Goals of any developers in the Hybrid Cloud world is in creating solutions, quickly, that enable enterprises to react to evolving ecosystems. Red Hat Marketplace offers a unified experience to purchase containerized software from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using the OpenShift Container Platform, monitor software spend, track license usage and expirations. This article will walk through the process of account registration, cluster setup and software trial through Red Hat Marketplace.","title":"RHM QuickStart"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#setup-marketplace-account","text":"Go to Red Hat Marketplace to view the catalog of containerized software ready to install into your OpenShift cluster. If you have an existing IBM ID or Red Hat ID , start by clicking the Login link provided at the top right corner of the page. Otherwise, click on the Create account button if you do not have one. \\(The Create account process will provision an IBM ID.\\) Fill in the information requested at the registration page. For Account type, select Company if you are registering the account for business purposes, else select Personal. Click Next. Payment options can be setup with either a credit card or an invoice. Using the invoice option requires you to have an IBM Customer number and a Purchase order number . Click Next and complete the registration.","title":"Setup Marketplace account"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#add-openshift-cluster","text":"OpenShift clusters must be added to your Marketplace workspace prior to deploying your choice of software. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private as long as the cluster can communicate with the Marketplace server.","title":"Add OpenShift cluster"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#prerequisites","text":"OpenShift Cluster: For this article we have chosen to use a managed OpenShift cluster on IBM cloud. If you do not have a cluster, create one by following this link. Pick OpenShift version 4.3 or higher. Deployment Key: A deployment key is required to link your OpenShift cluster to the marketplace. Select the drop down from the top right corner and go to My Account page. Note that this page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys and then click on Create key . Copy the key and save it in a secure place for later use prior to clicking the Save button. Now, let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequisites \\([CLIs](https://cloud.ibm.com/docs/openshift?topic=openshift-openshift-cli#cli_oc) and [jq](https://stedolan.github.io/jq/download/)\\) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. Note that account-id and cluster-uuid is prepopulated. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> You should see the following output on a successful completion: ================================================================================== [INFO] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1/6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2/6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3/6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4/6: Applying global pull secret... secret/pull-secret data updated STEP 5/6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6/6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page with the status as Registered . \\(wait 15 minutes for the registration to complete if the status shows Agent not installed \\) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step - if your cluster is running on IBM Cloud then run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluster id and node names. Reload worker? [kube-bqegbk1w00v8gmbt37l0-rhmtestcluster-default-000001d8] [y/N]> y Reloading workers for cluster rhm-test-cluster... Processing kube-bqegbk1w00v8gmbt37l0-rhmtestcluster-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rhmtestcluster-default-000001d8 complete. Now you are ready to try any software from the catalog! Reach out to the Marketplace technical support if you encounter an error and need assistnace to resolve the issue.","title":"Prerequisites"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#try-software","text":"Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for CockroachDB . Select the CockraochDB tile. The CockraochDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project cockroachdb-test Select the CockraochDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as cockroachdb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project cockroachdb-test .","title":"Try software"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#create-dabase-instance","text":"From the installed Operators page for CockroachDB, click on the link CockroachDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] CockroachDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1/1 Running 0 46m example-cockroachdb-0 1/1 Running 0 36m example-cockroachdb-1 1/1 Running 0 36m example-cockroachdb-2 1/1 Running 0 36m example-cockroachdb-init-l5m56 0/1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a CockroachDB client. kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test $ kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test If you don't see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-cockroachdb-0 8080 $ kubectl port-forward example-cockroachdb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-cockroachdb-public.cockroachdb-test.svc.cluster.local If you run into problems installing the operator or working with any products and have exhausted provided self-help options, the central support triage team is ready and available to assist as needed. Go to https://marketplace.redhat.com/en-us/support and submit a support case with product and problem details.","title":"Create dabase instance"},{"location":"articles/quickstart/rhm-quickstart-roks-long/#conclusion","text":"In the follow-on series, we will dive deeper into how Marketplace helps you rapidly take an idea from a proof-of-concept or pilot to a production scale application. You will also get to see the benefits of having a single place to manage the software consumption for your hybrid cloud applications.","title":"Conclusion"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/","text":"Red Hat Marketplace Quickstart \u00b6 As hybrid cloud is becoming the preferred cloud architecture among enterprises, the IT teams are seeking ways to simplify the way they buy, deploy and manage container based software across many clouds. Red Hat Marketplace offers a unified experience to purchase from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using OpenShift containerization, monitor software spend, track license usage and expirations. This article will walk you through the process of registration, cluster setup, software purchase and install via Red Hat Marketplace. Setup your account \u00b6 Go to Red Hat Marketplace and login with your IBM ID or Red Hat ID. Create your IBM or Red Hat id if you do not have one. I'll use my IBM ID for the purposes of this demonstration. Fill in the information requested at the registration page. Select Company if you are registering using a corporate id else select Personal. Click Next. Setting up with Credit card: Setting up with Invoice me later: This option requires you have an IBM Customer number and optionally a Purchase order number. You will see the landing page after the registration completes. Browse through the catalog of available containerized software ready to deploy into your OpenShift cluster. Add your OpenShift cluster \u00b6 OpenShift clusters must be added to your marketplace workspace prior to be able to deploy your choice of software. Prerequisites \u00b6 OpenShift Cluster: Create a managed OpenShift cluster on IBM Cloud if you do not have one. Deployment Key: TODO - Creating key best practice goes here. Select the drop down from the top right corner and go to My Account page. This page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys to the click on Create key . Copy then key and save it for later use prior to clicking for the Save button. Now, Let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequites (CLIs and jq) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s 5e9ccb95a85d690013d1b9e0 bca6d535-6bca-4741-951d-35f6295d55a0 <deployment_key> You should see the flowing output on a successful completion: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1 /6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2 /6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3 /6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4 /6: Applying global pull secret... secret/pull-secret data updated STEP 5 /6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6 /6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page. (wait for an hour to register if the status shows Agent not installed ) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step if your cluster is running on IBM Cloud. Run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluser id and node names. Reload worker? [ kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 ] [ y/N ] > y Reloading workers for cluster rj-rhm-summit... Processing kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 complete. Now you are ready to try any software from the catalog! Try software \u00b6 Let's see how the Free Trial option works. Go to the marketplace catalog and search for Crunchy PostgreSQL and select the tile. The product page gives you an overview, documentation and pricing options associated with the product selected. Cick on Free Trail button. Next, the purchase summary will show the Subscription term and total cost. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Prereq?? Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project cockroachdb-test Select the Crunchy PostgreSQL tile and select the Operators tab. Click on Install Operator button. Deploy an application \u00b6 Conclusion \u00b6","title":"Red Hat Marketplace Quickstart"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#red-hat-marketplace-quickstart","text":"As hybrid cloud is becoming the preferred cloud architecture among enterprises, the IT teams are seeking ways to simplify the way they buy, deploy and manage container based software across many clouds. Red Hat Marketplace offers a unified experience to purchase from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using OpenShift containerization, monitor software spend, track license usage and expirations. This article will walk you through the process of registration, cluster setup, software purchase and install via Red Hat Marketplace.","title":"Red Hat Marketplace Quickstart"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#setup-your-account","text":"Go to Red Hat Marketplace and login with your IBM ID or Red Hat ID. Create your IBM or Red Hat id if you do not have one. I'll use my IBM ID for the purposes of this demonstration. Fill in the information requested at the registration page. Select Company if you are registering using a corporate id else select Personal. Click Next. Setting up with Credit card: Setting up with Invoice me later: This option requires you have an IBM Customer number and optionally a Purchase order number. You will see the landing page after the registration completes. Browse through the catalog of available containerized software ready to deploy into your OpenShift cluster.","title":"Setup your account"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#add-your-openshift-cluster","text":"OpenShift clusters must be added to your marketplace workspace prior to be able to deploy your choice of software.","title":"Add your OpenShift cluster"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#prerequisites","text":"OpenShift Cluster: Create a managed OpenShift cluster on IBM Cloud if you do not have one. Deployment Key: TODO - Creating key best practice goes here. Select the drop down from the top right corner and go to My Account page. This page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys to the click on Create key . Copy then key and save it for later use prior to clicking for the Save button. Now, Let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequites (CLIs and jq) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s 5e9ccb95a85d690013d1b9e0 bca6d535-6bca-4741-951d-35f6295d55a0 <deployment_key> You should see the flowing output on a successful completion: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1 /6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2 /6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3 /6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4 /6: Applying global pull secret... secret/pull-secret data updated STEP 5 /6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6 /6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page. (wait for an hour to register if the status shows Agent not installed ) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step if your cluster is running on IBM Cloud. Run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluser id and node names. Reload worker? [ kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 ] [ y/N ] > y Reloading workers for cluster rj-rhm-summit... Processing kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 complete. Now you are ready to try any software from the catalog!","title":"Prerequisites"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#try-software","text":"Let's see how the Free Trial option works. Go to the marketplace catalog and search for Crunchy PostgreSQL and select the tile. The product page gives you an overview, documentation and pricing options associated with the product selected. Cick on Free Trail button. Next, the purchase summary will show the Subscription term and total cost. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Prereq?? Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project cockroachdb-test Select the Crunchy PostgreSQL tile and select the Operators tab. Click on Install Operator button.","title":"Try software"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#deploy-an-application","text":"","title":"Deploy an application"},{"location":"articles/quickstart/rhm-quickstart-roks-long1/#conclusion","text":"","title":"Conclusion"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/","text":"Red Hat Marketplace Quickstart \u00b6 As hybrid cloud becomes the preferred cloud architecture among enterprises, the IT teams are seeking ways to simplify how they buy, deploy and manage container based software across many clouds. Red Hat Marketplace offers a unified experience to purchase containerized sofware from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using the OpenShift Contianer Platform, monitor software spend, track license usage and expirations. This article will walk through the process of account registration, cluster setup and softare trial through Red Hat Marketplace. Setup Marketplace account \u00b6 Go to Red Hat Marketplace and login with your IBM ID or Red Hat ID. Create your IBM or Red Hat id if you do not have one. This article uses an IBM ID for the purposes of demonstration. Fill in the information requested at the registration page. For Account type , select Company if you are registering the account for business purposes, else select Personal . Click Next. Payment options can be setup with either a credit card or an invoice. Using the invoice option requires you to have an IBM Customer number and a Purchase order number . You will see the landing page after the registration completes. Browse through the catalog of containerized software ready to install into your OpenShift cluster. Add OpenShift cluster \u00b6 OpenShift clusters must be added to your Marketplace workspace prior to deploying your choice of software. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private as long as the cluster can communicate with the Marketplace server. Prerequisites \u00b6 OpenShift Cluster: For this article we have chosen to use a managed OpenShift cluster on IBM cloud. If you do not have a cluster, create one by following this link. Deployment Key: A deployment key is required to link your OpenShift cluster to the marketplace. Select the drop down from the top right corner and go to My Account page. Note that this page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys and then click on Create key . Copy the key and save it in a secure place for later use prior to clicking the Save button. Now, let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequites (CLIs and jq) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. Note that account id and \u2190id> should be prepopulated. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> bca6d535-6bca-4741-951d-35f6295d55a0 <deployment-key> You should see the flowing output on a successful completion: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1 /6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2 /6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3 /6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4 /6: Applying global pull secret... secret/pull-secret data updated STEP 5 /6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6 /6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page with the status as Registered . (wait for an hour to register if the status shows Agent not installed ) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step - if your cluster is running on IBM Cloud then run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluster id and node names. Reload worker? [ kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 ] [ y/N ] > y Reloading workers for cluster rhm-test-cluster... Processing kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 complete. Now you are ready to try any software from the catalog! Try software \u00b6 Let's see how the Free Trial option works. Go to the Marketplace catalog and search for Crunchy PostgreSQL and select the tile. The product page gives you an overview, documentation and pricing options associated with the product selected. Cick on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project crunchy-test Select the Crunchy PostgreSQL tile and select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successfull. Congratultions, you are now ready to install the Crunchy PostgreSQL cluster! Conclusion \u00b6 In a follow on series, we will dive deeper into how Markertplace helps you rapidly take an idea from PoC to production scale application. You will also get to see the benfits of having a single place to manage the software consumption for your hybrid cloud applications. StorageClass: ibmc-file-gold Storage > Persistent Volume Claims, status should be shown as Bound. $ kubectl run -it --rm cockroach-client \\ --image = cockroachdb/cockroach \\ --restart = Never \\ --command -- \\ ./cockroach sql --insecure --host = example-cockroachdb-public.cockroachdb-test If you don ' t see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> kubectl run -it --rm cockroach-client \\ --image = cockroachdb/cockroach \\ --restart = Never \\ --command -- \\ ./cockroach sql --insecure --host = example-cockroachdb-public.cockroachdb-test If you dont see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach ; CREATE USER 1 Time: 13 .604101ms root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank ; CREATE DATABASE Time: 15 .0454ms root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach ; GRANT Time: 14 .835156ms root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\" . kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1 /1 Running 0 46m example-cockroachdb-0 1 /1 Running 0 36m example-cockroachdb-1 1 /1 Running 0 36m example-cockroachdb-2 1 /1 Running 0 36m example-cockroachdb-init-l5m56 0 /1 Completed 0 36m kubectl port-forward example-cockroachdb-0 8080 Forwarding from [ ::1 ] :8080 -> 8080","title":"Red Hat Marketplace Quickstart"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/#red-hat-marketplace-quickstart","text":"As hybrid cloud becomes the preferred cloud architecture among enterprises, the IT teams are seeking ways to simplify how they buy, deploy and manage container based software across many clouds. Red Hat Marketplace offers a unified experience to purchase containerized sofware from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using the OpenShift Contianer Platform, monitor software spend, track license usage and expirations. This article will walk through the process of account registration, cluster setup and softare trial through Red Hat Marketplace.","title":"Red Hat Marketplace Quickstart"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/#setup-marketplace-account","text":"Go to Red Hat Marketplace and login with your IBM ID or Red Hat ID. Create your IBM or Red Hat id if you do not have one. This article uses an IBM ID for the purposes of demonstration. Fill in the information requested at the registration page. For Account type , select Company if you are registering the account for business purposes, else select Personal . Click Next. Payment options can be setup with either a credit card or an invoice. Using the invoice option requires you to have an IBM Customer number and a Purchase order number . You will see the landing page after the registration completes. Browse through the catalog of containerized software ready to install into your OpenShift cluster.","title":"Setup Marketplace account"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/#add-openshift-cluster","text":"OpenShift clusters must be added to your Marketplace workspace prior to deploying your choice of software. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private as long as the cluster can communicate with the Marketplace server.","title":"Add OpenShift cluster"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/#prerequisites","text":"OpenShift Cluster: For this article we have chosen to use a managed OpenShift cluster on IBM cloud. If you do not have a cluster, create one by following this link. Deployment Key: A deployment key is required to link your OpenShift cluster to the marketplace. Select the drop down from the top right corner and go to My Account page. Note that this page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys and then click on Create key . Copy the key and save it in a secure place for later use prior to clicking the Save button. Now, let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequites (CLIs and jq) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. Note that account id and \u2190id> should be prepopulated. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> bca6d535-6bca-4741-951d-35f6295d55a0 <deployment-key> You should see the flowing output on a successful completion: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1 /6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2 /6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3 /6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4 /6: Applying global pull secret... secret/pull-secret data updated STEP 5 /6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6 /6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page with the status as Registered . (wait for an hour to register if the status shows Agent not installed ) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step - if your cluster is running on IBM Cloud then run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluster id and node names. Reload worker? [ kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 ] [ y/N ] > y Reloading workers for cluster rhm-test-cluster... Processing kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 complete. Now you are ready to try any software from the catalog!","title":"Prerequisites"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/#try-software","text":"Let's see how the Free Trial option works. Go to the Marketplace catalog and search for Crunchy PostgreSQL and select the tile. The product page gives you an overview, documentation and pricing options associated with the product selected. Cick on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project crunchy-test Select the Crunchy PostgreSQL tile and select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successfull. Congratultions, you are now ready to install the Crunchy PostgreSQL cluster!","title":"Try software"},{"location":"articles/quickstart/rhm-quickstart-roks-long2/#conclusion","text":"In a follow on series, we will dive deeper into how Markertplace helps you rapidly take an idea from PoC to production scale application. You will also get to see the benfits of having a single place to manage the software consumption for your hybrid cloud applications. StorageClass: ibmc-file-gold Storage > Persistent Volume Claims, status should be shown as Bound. $ kubectl run -it --rm cockroach-client \\ --image = cockroachdb/cockroach \\ --restart = Never \\ --command -- \\ ./cockroach sql --insecure --host = example-cockroachdb-public.cockroachdb-test If you don ' t see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> kubectl run -it --rm cockroach-client \\ --image = cockroachdb/cockroach \\ --restart = Never \\ --command -- \\ ./cockroach sql --insecure --host = example-cockroachdb-public.cockroachdb-test If you dont see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach ; CREATE USER 1 Time: 13 .604101ms root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank ; CREATE DATABASE Time: 15 .0454ms root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach ; GRANT Time: 14 .835156ms root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\" . kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1 /1 Running 0 46m example-cockroachdb-0 1 /1 Running 0 36m example-cockroachdb-1 1 /1 Running 0 36m example-cockroachdb-2 1 /1 Running 0 36m example-cockroachdb-init-l5m56 0 /1 Completed 0 36m kubectl port-forward example-cockroachdb-0 8080 Forwarding from [ ::1 ] :8080 -> 8080","title":"Conclusion"},{"location":"articles/quickstart/rhm-quickstart-roks-short/","text":"Red Hat Marketplace QuickStart \u00b6 As hybrid cloud becomes the preferred cloud architecture among enterprises, the IT teams are seeking ways to simplify how they buy, deploy and manage container-based software across many clouds. Red Hat Marketplace offers a unified experience to purchase containerized software from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using the OpenShift Container Platform, monitor software spend, track license usage and expirations. This article will walk through the process of account registration, cluster setup and software trial through Red Hat Marketplace. Setup Marketplace account \u00b6 Go to Red Hat Marketplace and login with your IBM ID or Red Hat ID. Create your IBM or Red Hat id if you do not have one. This article uses an IBM ID for the purposes of demonstration. Fill in the information requested at the registration page. For Account type , select Company if you are registering the account for business purposes, else select Personal . Click Next. Payment options can be setup with either a credit card or an invoice. Using the invoice option requires you to have an IBM Customer number and a Purchase order number . You will see the landing page after the registration completes. Browse through the catalog of containerized software ready to install into your OpenShift cluster. Add OpenShift cluster \u00b6 OpenShift clusters must be added to your Marketplace workspace prior to deploying your choice of software. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private as long as the cluster can communicate with the Marketplace server. Prerequisites \u00b6 OpenShift Cluster: For this article we have chosen to use a managed OpenShift cluster on IBM cloud. If you do not have a cluster, create one by following this link. Pick OpenShift version 4.3 or higher. Deployment Key: A deployment key is required to link your OpenShift cluster to the marketplace. Select the drop down from the top right corner and go to My Account page. Note that this page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys and then click on Create key . Copy the key and save it in a secure place for later use prior to clicking the Save button. Now, let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequisites (CLIs and jq) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. Note that account id and cluster-uuid should be prepopulated. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> You should see the flowing output on a successful completion: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1 /6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2 /6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3 /6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4 /6: Applying global pull secret... secret/pull-secret data updated STEP 5 /6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6 /6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page with the status as Registered . (wait 15 minutes for the registration to complete if the status shows Agent not installed ) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step - if your cluster is running on IBM Cloud then run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluster id and node names. Reload worker? [ kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 ] [ y/N ] > y Reloading workers for cluster rhm-test-cluster... Processing kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 complete. Now you are ready to try any software from the catalog! Reach out to the Marketplace technical support if you encounter an error and need help to resolve the issue. Try software \u00b6 Let's see how the Free Trial option works. Go to the Marketplace catalog and search for Crunchy PostgreSQL and select the tile. The product page gives you an overview, documentation and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project crunchy-test Select the Crunchy PostgreSQL tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. Congratulations, you are now ready to install the Crunchy PostgreSQL cluster! Conclusion \u00b6 In the follow-on series, we will dive deeper into how Marketplace helps you rapidly take an idea from a proof of concept to a production scale application. You will also get to see the benefits of having a single place to manage the software consumption for your hybrid cloud applications.","title":"Red Hat Marketplace QuickStart"},{"location":"articles/quickstart/rhm-quickstart-roks-short/#red-hat-marketplace-quickstart","text":"As hybrid cloud becomes the preferred cloud architecture among enterprises, the IT teams are seeking ways to simplify how they buy, deploy and manage container-based software across many clouds. Red Hat Marketplace offers a unified experience to purchase containerized software from a comprehensive catalog backed by leading cloud vendors, deploy across all clouds using the OpenShift Container Platform, monitor software spend, track license usage and expirations. This article will walk through the process of account registration, cluster setup and software trial through Red Hat Marketplace.","title":"Red Hat Marketplace QuickStart"},{"location":"articles/quickstart/rhm-quickstart-roks-short/#setup-marketplace-account","text":"Go to Red Hat Marketplace and login with your IBM ID or Red Hat ID. Create your IBM or Red Hat id if you do not have one. This article uses an IBM ID for the purposes of demonstration. Fill in the information requested at the registration page. For Account type , select Company if you are registering the account for business purposes, else select Personal . Click Next. Payment options can be setup with either a credit card or an invoice. Using the invoice option requires you to have an IBM Customer number and a Purchase order number . You will see the landing page after the registration completes. Browse through the catalog of containerized software ready to install into your OpenShift cluster.","title":"Setup Marketplace account"},{"location":"articles/quickstart/rhm-quickstart-roks-short/#add-openshift-cluster","text":"OpenShift clusters must be added to your Marketplace workspace prior to deploying your choice of software. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private as long as the cluster can communicate with the Marketplace server.","title":"Add OpenShift cluster"},{"location":"articles/quickstart/rhm-quickstart-roks-short/#prerequisites","text":"OpenShift Cluster: For this article we have chosen to use a managed OpenShift cluster on IBM cloud. If you do not have a cluster, create one by following this link. Pick OpenShift version 4.3 or higher. Deployment Key: A deployment key is required to link your OpenShift cluster to the marketplace. Select the drop down from the top right corner and go to My Account page. Note that this page provides you access to all the account management functions such as account information, access permissions, spending, offers and keys. Select Deployment keys and then click on Create key . Copy the key and save it in a secure place for later use prior to clicking the Save button. Now, let's proceed with adding the OpenShift cluster. Select Workspace > Clusters and click on Add cluster Enter a name that best represents the cluster you want to add. Install the additional prerequisites (CLIs and jq) required to run the install script. Login to your cluster using the oc login command with the admin credentials. Run the operator install script and provide the deployment key created in the prior step as the input parameter. Note that account id and cluster-uuid should be prepopulated. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> You should see the flowing output on a successful completion: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== STEP 1 /6: Creating Namespace... namespace/redhat-marketplace-operator created STEP 2 /6: Creating Red Hat Marketplace Operator Group... operatorgroup.operators.coreos.com/redhat-marketplace-operator created STEP 3 /6: Creating Red Hat Marketplace Operator Subscription... Checking for Cluster Service Version... Checking for Custom Resource Definition... subscription.operators.coreos.com/redhat-marketplace-operator created STEP 4 /6: Applying global pull secret... secret/pull-secret data updated STEP 5 /6: Applying Red Hat Marketplace Operator Secret... secret/rhm-operator-secret created STEP 6 /6: Creating Red Hat Marketplace Operator Config Custom Resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created Red Hat Marketplace Operator successfully installed Click on Add cluster button to complete the add cluster step. The cluster should appear in the Clusters page with the status as Registered . (wait 15 minutes for the registration to complete if the status shows Agent not installed ) Check the list of installed operators in your OpenShift cluster. Red Hat Marketplace operator should be one of them. One last step - if your cluster is running on IBM Cloud then run the following command to reload the worker nodes. This step may take 20-30 minutes. ibmcloud ks worker reload --cluster <cluster-id> --worker <worker-node-name> Use ibmcloud ks clusters and ibmcloud ks workers --cluster <cluster-id> to determine the cluster id and node names. Reload worker? [ kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 ] [ y/N ] > y Reloading workers for cluster rhm-test-cluster... Processing kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8... Processing on kube-bqegbk1w00v8gmbt37l0-rjrhmsummit-default-000001d8 complete. Now you are ready to try any software from the catalog! Reach out to the Marketplace technical support if you encounter an error and need help to resolve the issue.","title":"Prerequisites"},{"location":"articles/quickstart/rhm-quickstart-roks-short/#try-software","text":"Let's see how the Free Trial option works. Go to the Marketplace catalog and search for Crunchy PostgreSQL and select the tile. The product page gives you an overview, documentation and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project crunchy-test Select the Crunchy PostgreSQL tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. Congratulations, you are now ready to install the Crunchy PostgreSQL cluster!","title":"Try software"},{"location":"articles/quickstart/rhm-quickstart-roks-short/#conclusion","text":"In the follow-on series, we will dive deeper into how Marketplace helps you rapidly take an idea from a proof of concept to a production scale application. You will also get to see the benefits of having a single place to manage the software consumption for your hybrid cloud applications.","title":"Conclusion"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/","text":"Using CodeReady Containers with Marketplace \u00b6 CodeReady Containers \u00b6 CodeReady Containers is the quickest way for developers to get started with OpenShift 4.1 or newer clusters. It is designed to run on a local computer to simplify setup and testing to emulate the cloud development environment locally with all the tools needed to develop container-based apps. Red Hat Marketplace was created to help developers using Red Hat OpenShift, to build solutions and deploy them across hybrid cloud as well as developer's workstation running CodeReady Containers. This article will walk you through the steps of setting up the Marketplace and installing containerized products in a CodeReady Container based OpenShift cluster. Install CodeReady Containers \u00b6 CodeReady Containers is delivered as a Red Hat Enterprise Linux virtual machine that supports native hypervisors for Linux, macOS, and Windows 10. This tutorial will use CodeReady Containers v1.11 (with OpenShift 4.5) on Mac. The install process requires you to login with your Red Hat id and download the CodeReady Containers archive along with the pull secret file. Follow the installation instructions as shown in this article . The messages shown below indicate the crc setup command completed successfully. INFO Checking if oc binary is cached INFO Caching oc binary INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Caching goodhosts binary INFO Will use root access: change ownership of /Users/rojan/.crc/bin/goodhosts INFO Will use root access: set suid for /Users/rojan/.crc/bin/goodhosts INFO Checking if CRC bundle is cached in '$HOME/.crc' INFO Unpacking bundle from the CRC binary INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Setting up virtualization with HyperKit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/hyperkit INFO Checking if crc-driver-hyperkit is installed INFO Installing crc-machine-hyperkit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Checking file permissions for /etc/resolver/testing INFO Setting file permissions for /etc/resolver/testing INFO Will use root access: create file /etc/resolver/testing INFO Will use root access: change ownership of /etc/resolver/testing Setup is complete, you can now run 'crc start' to start the OpenShift cluster Start CodeReady Containers \u00b6 After the setup is complete, start CodeReady Containers by running the command crc start or crc start -p pull-secret.txt . Ensure your VPN sessions are turned off as this can result in an improper start. crc start INFO Checking if oc binary is cached INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Checking if crc-driver-hyperkit is installed INFO Checking file permissions for /etc/resolver/testing ? Image pull secret [ ? for help ] ******************************************************************************************************************** INFO Extracting bundle: crc_hyperkit_4.4.5.crcbundle ... ******************************************************************************************************************* INFO Checking size of the disk image /Users/rojan/.crc/cache/crc_hyperkit_4.4.5/crc.qcow2 ... ****************************************************************************** INFO Creating CodeReady Containers VM for OpenShift 4 .4.5... *************************************************************************************************************** INFO CodeReady Containers VM is running ************************************************************************************************************************** INFO Verifying validity of the cluster certificates ... ******************************************************************************************************************** INFO Restarting the host network ************************************************************************************************************************** INFO Check internal and public DNS query ... ************************************************************************************************************************** INFO Check DNS query from host ... ************************************************************************************************************************** INFO Generating new SSH key ************************************************************************************************************************** INFO Copying kubeconfig file to instance dir ... ************************************************************************************************************************** INFO Starting OpenShift kubelet service ************************************************************************************************************************** INFO Configuring cluster for first start ************************************************************************************************************************** INFO Adding user 's pull secret ... ************************************************************************************************************************** INFO Updating cluster ID ... INFO Starting OpenShift cluster ... [waiting 3m] INFO INFO To access the cluster, first set up your environment by following ' crc oc-env ' instructions INFO Then you can access it by running ' oc login -u developer -p developer https://api.crc.testing:6443 ' INFO To login as an admin, run ' oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 ' INFO INFO You can now run ' crc console ' and use these credentials to access the OpenShift web console Started the OpenShift cluster WARN The cluster might report a degraded or error state. This is expected since several operators have been disabled to lower the resource usage. For more information, please consult the documentation Note: Save the login credentials for later use. The cluster started in a degraded state. The difference between CodeReady Containers and a production OpenShift cluster is summarized here . Run the command below to ensure the correct oc is set up in the path: eval $( crc oc-env ) Verify the cluster is running by running the command crc console to open the cluster console. Login as admin using the credentials from the crc start command. Install Marketplace Prerequisites \u00b6 Setting up a Marketplace account and a deployment key is described in this article . OpenShift CLI and jq plugins are the other prerequisites to run the Marketplace install script. OpenShift CLI comes with the CodeReady Containers install. Add CodeReady Containers Cluster \u00b6 Login as admin from the command window using the credentials from the crc start command. oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 The server uses a certificate signed by an unknown authority. You can bypass the certificate check, but any data you send to the server could be intercepted by others. Use insecure connections? ( y/n ) : y Login successful. You have access to 57 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . Select Workspace > Clusters and click on Add cluster. Enter a name for your CodeReady Containers cluster. Copy the install script command and then click on the Add Cluster button. Now, run the install script at the command window to install the Marketplace Operator into your cluster. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> Note: The account-id and cluster-uuid are pre-populated and use the deployment-key provisioned from your marketplace account. The source code for Marketplace Operator is available at https://github.com/redhat-marketplace/redhat-marketplace-operator Following messages indicate a successful install of the Marketplace operator: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== Detected the following options: > Account Id: be3245669cea4170013ew34253 > Cluster UUID: afda7034-402f-4f34-8f59-4954d12f8c32 > Deployment Key: dzJhbGciOiJIUzMNNiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhXXd35msOpOjE1ODM4NjYwMzIsImp0aSI6IjUyOWM0ZTU5Njk2ZDRjNWQ4ZGQyZTXXb5ZDdlIn0.eXyDgQ2Zg5aC3AhoEaDFGD66K8k638KnG-vu2YgGWbg > Approval Strategy: Automatic Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace... Installing Red Hat Marketplace Operator... STEP 2 /5: Applying global pull secret... W0605 16 :06:16.568278 47812 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. info: pull-secret was not changed Applying global pull secret succeeded STEP 3 /5: Installing the Red Hat Marketplace Operator. This might take several minutes... namespace/openshift-redhat-marketplace created operatorgroup.operators.coreos.com/redhat-marketplace-operator created secret/rhm-operator-secret created subscription.operators.coreos.com/redhat-marketplace-operator created Checking for Cluster Service Version... Checking for Custom Resource Definition... STEP 4 /5: Creating Red Hat Marketplace Operator Config custom resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created STEP 5 /5: Checking for Razee resources to be created... pod/featureflagsetld-controller-8565b84c74-kz5vt condition met pod/managedset-controller-795445978d-x98c4 condition met pod/mustachetemplate-controller-84567c4bff-ghzhj condition met pod/remoteresource-controller-f4465cf4d-hbsqg condition met pod/remoteresources3-controller-7cbc7d7db9-jhtkb condition met pod/remoteresources3decrypt-controller-6b4d999b6-jgzzw condition met pod/watch-keeper-8668c5798c-jmjms condition met Red Hat Marketplace Operator successfully installed Few additional steps are required to make the cluster global pull secret work in CodeReady Containers. Run oc get secret pull-secret -n openshift-config --output=\"jsonpath={.data.\\.dockerconfigjson}\" | base64 --decode and copy the output. Get the node name by running oc get node Debug the node using oc debug node/<nodename> When the debug pod comes up, chroot /host Replace the content in '/var/lib/kubelet/config.json' with the output copied earlier from the oc get secret .. command. exit to exit debug pod Run crc stop and then crc start oc get node NAME STATUS ROLES AGE VERSION crc-m27h4-master-0 Ready master,worker 9d v1.17.1 $ oc debug node/crc-m27h4-master-0 Starting pod/crc-m27h4-master-0-debug ... To use host binaries, run ` chroot /host ` Pod IP: 192 .168.126.11 If you don ' t see a command prompt, try pressing enter. sh-4.2# chroot /host sh-4.4# vi /var/lib/kubelet/config.json sh-4.4# sh-4.4# exit exit sh-4.2# exit exit Removing debug pod ... This completes the cluster setup in the Marketplace. Marketplace products are ready to install after the cluster comes up. Install product \u00b6 The marketplace offers a wide variety of products across twelve categories. Let's see how a developer can try Cortex Certifai. Create a project cortex-certifai-test in your CodeReady Containers cluster. Go to the Marketplace catalog and search for Cortex Certifai. Select the tile and click on Free trial to start your 30 days trial. Go to Workspace > My Software and click on the Install operator icon. Select the CodeReady Containers cluster from the list of Target clusters and then pick the Namespace Scope where the operator should get installed. Login to the cluster to verify the operator installed successfully. Proceed to the Cortex Certifai Operator tab to install operands or instances for the Cortex Certifai operator. The operators can be installed directly from the cluster. The Red Hat Marketplace operators become available in the Operator Hub catalog after the Marketplace operator is installed. To install a product directly from the CodeReady Containers, login to the cluster, go to Operators > OperatorHub , search and install. Note: Marketplace should appear as a filter parameter under Product type in the OpertorHub search options. Uninstalling an Operator \u00b6 Uninstall the Cortex Certifai operator by selecting the Uninstall Operator . The operator for the cluster will automatically delist from the Marketplace product operators page. Installing products using CLI commands \u00b6 This section covers the steps to install E.D.D.I chatbot operator using CLI commands. The general instructions to install an operator is available here . Prior to using CLI install, ensure the entitlement for the software exists in the Red Hat Marketplace. Disclaimer: The operators installed using the CLI will not show up in the list of installed opertroars in Red Hat Marketplace. Get the list of Red Hat Marketplace Operators: oc get packagemanifests -n openshift-marketplace | grep Marketplace Find the package name for E.D.D.I Operator oc get packagemanifests -n openshift-marketplace | grep eddi eddi-operator-certified Certified Operators 16d eddi-operator-certified-rhmp Red Hat Marketplace 16d Describe the package eddi-operator-certified-rhmp : oc describe packagemanifests eddi-operator-certified-rhmp -n openshift-marketplace Use the commands above to gather the information required to generate the Operator group and Operator subscription yaml files. Operator group (eddioperatorgroup.yaml): apiVersion : operators.coreos.com/v1 kind : OperatorGroup metadata : name : eddi-og-redhat-marketplace namespace : eddi-trial spec : targetNamespaces : - eddi-trial Operator subscritpion (eddisub.yaml): apiVersion : operators.coreos.com/v1alpha1 kind : Subscription metadata : name : eddi-operator-certified-rhmp namespace : eddi-trial spec : channel : alpha name : eddi-operator-certified-rhmp source : redhat-marketplace sourceNamespace : openshift-marketplace Install the EDDI Operator: oc apply -f eddioperatorgroup.yaml operatorgroup.operators.coreos.com/eddi-og-redhat-marketplace unchanged $ oc apply -f eddisub.yaml subscription.operators.coreos.com/eddi-operator-certified-rhmp created Ensure the subscription installed properly by running the command: oc describe sub eddi-operator-certified-rhmp -n eddi-trial | grep -A5 Conditions Conditions: Last Transition Time: 2020 -06-13T02:36:36Z Message: all available catalogsources are healthy Reason: AllCatalogSourcesHealthy Status: False Type: CatalogSourcesUnhealthy Troubleshooting \u00b6 Commands to troubleshoot CodeReady Containers can be found here The error below indicates the necessary entitlement does not exist for the product in Red Hat Marketplace: Failed to pull image \"registry.marketplace.redhat.com/rhm/labsai/eddi-operator@sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75\" : rpc error: code = Unknown desc = Error reading manifest sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75 in registry.marketplace.redhat.com/rhm/labsai/eddi-operator: errors: denied: requested access to the resource is denied unauthorized: authentication required Conclusion \u00b6 With the ability to install Red Hat Marketplace products on CodeReady Containers, developers get the flexibility to try and test Marketplace products on their workstations early in the application development lifecycle.","title":"Using CodeReady Containers with Marketplace"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#using-codeready-containers-with-marketplace","text":"","title":"Using CodeReady Containers with Marketplace"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#codeready-containers","text":"CodeReady Containers is the quickest way for developers to get started with OpenShift 4.1 or newer clusters. It is designed to run on a local computer to simplify setup and testing to emulate the cloud development environment locally with all the tools needed to develop container-based apps. Red Hat Marketplace was created to help developers using Red Hat OpenShift, to build solutions and deploy them across hybrid cloud as well as developer's workstation running CodeReady Containers. This article will walk you through the steps of setting up the Marketplace and installing containerized products in a CodeReady Container based OpenShift cluster.","title":"CodeReady Containers"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#install-codeready-containers","text":"CodeReady Containers is delivered as a Red Hat Enterprise Linux virtual machine that supports native hypervisors for Linux, macOS, and Windows 10. This tutorial will use CodeReady Containers v1.11 (with OpenShift 4.5) on Mac. The install process requires you to login with your Red Hat id and download the CodeReady Containers archive along with the pull secret file. Follow the installation instructions as shown in this article . The messages shown below indicate the crc setup command completed successfully. INFO Checking if oc binary is cached INFO Caching oc binary INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Caching goodhosts binary INFO Will use root access: change ownership of /Users/rojan/.crc/bin/goodhosts INFO Will use root access: set suid for /Users/rojan/.crc/bin/goodhosts INFO Checking if CRC bundle is cached in '$HOME/.crc' INFO Unpacking bundle from the CRC binary INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Setting up virtualization with HyperKit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/hyperkit INFO Checking if crc-driver-hyperkit is installed INFO Installing crc-machine-hyperkit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Checking file permissions for /etc/resolver/testing INFO Setting file permissions for /etc/resolver/testing INFO Will use root access: create file /etc/resolver/testing INFO Will use root access: change ownership of /etc/resolver/testing Setup is complete, you can now run 'crc start' to start the OpenShift cluster","title":"Install CodeReady Containers"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#start-codeready-containers","text":"After the setup is complete, start CodeReady Containers by running the command crc start or crc start -p pull-secret.txt . Ensure your VPN sessions are turned off as this can result in an improper start. crc start INFO Checking if oc binary is cached INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Checking if crc-driver-hyperkit is installed INFO Checking file permissions for /etc/resolver/testing ? Image pull secret [ ? for help ] ******************************************************************************************************************** INFO Extracting bundle: crc_hyperkit_4.4.5.crcbundle ... ******************************************************************************************************************* INFO Checking size of the disk image /Users/rojan/.crc/cache/crc_hyperkit_4.4.5/crc.qcow2 ... ****************************************************************************** INFO Creating CodeReady Containers VM for OpenShift 4 .4.5... *************************************************************************************************************** INFO CodeReady Containers VM is running ************************************************************************************************************************** INFO Verifying validity of the cluster certificates ... ******************************************************************************************************************** INFO Restarting the host network ************************************************************************************************************************** INFO Check internal and public DNS query ... ************************************************************************************************************************** INFO Check DNS query from host ... ************************************************************************************************************************** INFO Generating new SSH key ************************************************************************************************************************** INFO Copying kubeconfig file to instance dir ... ************************************************************************************************************************** INFO Starting OpenShift kubelet service ************************************************************************************************************************** INFO Configuring cluster for first start ************************************************************************************************************************** INFO Adding user 's pull secret ... ************************************************************************************************************************** INFO Updating cluster ID ... INFO Starting OpenShift cluster ... [waiting 3m] INFO INFO To access the cluster, first set up your environment by following ' crc oc-env ' instructions INFO Then you can access it by running ' oc login -u developer -p developer https://api.crc.testing:6443 ' INFO To login as an admin, run ' oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 ' INFO INFO You can now run ' crc console ' and use these credentials to access the OpenShift web console Started the OpenShift cluster WARN The cluster might report a degraded or error state. This is expected since several operators have been disabled to lower the resource usage. For more information, please consult the documentation Note: Save the login credentials for later use. The cluster started in a degraded state. The difference between CodeReady Containers and a production OpenShift cluster is summarized here . Run the command below to ensure the correct oc is set up in the path: eval $( crc oc-env ) Verify the cluster is running by running the command crc console to open the cluster console. Login as admin using the credentials from the crc start command.","title":"Start CodeReady Containers"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#install-marketplace-prerequisites","text":"Setting up a Marketplace account and a deployment key is described in this article . OpenShift CLI and jq plugins are the other prerequisites to run the Marketplace install script. OpenShift CLI comes with the CodeReady Containers install.","title":"Install Marketplace Prerequisites"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#add-codeready-containers-cluster","text":"Login as admin from the command window using the credentials from the crc start command. oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 The server uses a certificate signed by an unknown authority. You can bypass the certificate check, but any data you send to the server could be intercepted by others. Use insecure connections? ( y/n ) : y Login successful. You have access to 57 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . Select Workspace > Clusters and click on Add cluster. Enter a name for your CodeReady Containers cluster. Copy the install script command and then click on the Add Cluster button. Now, run the install script at the command window to install the Marketplace Operator into your cluster. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> Note: The account-id and cluster-uuid are pre-populated and use the deployment-key provisioned from your marketplace account. The source code for Marketplace Operator is available at https://github.com/redhat-marketplace/redhat-marketplace-operator Following messages indicate a successful install of the Marketplace operator: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== Detected the following options: > Account Id: be3245669cea4170013ew34253 > Cluster UUID: afda7034-402f-4f34-8f59-4954d12f8c32 > Deployment Key: dzJhbGciOiJIUzMNNiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhXXd35msOpOjE1ODM4NjYwMzIsImp0aSI6IjUyOWM0ZTU5Njk2ZDRjNWQ4ZGQyZTXXb5ZDdlIn0.eXyDgQ2Zg5aC3AhoEaDFGD66K8k638KnG-vu2YgGWbg > Approval Strategy: Automatic Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace... Installing Red Hat Marketplace Operator... STEP 2 /5: Applying global pull secret... W0605 16 :06:16.568278 47812 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. info: pull-secret was not changed Applying global pull secret succeeded STEP 3 /5: Installing the Red Hat Marketplace Operator. This might take several minutes... namespace/openshift-redhat-marketplace created operatorgroup.operators.coreos.com/redhat-marketplace-operator created secret/rhm-operator-secret created subscription.operators.coreos.com/redhat-marketplace-operator created Checking for Cluster Service Version... Checking for Custom Resource Definition... STEP 4 /5: Creating Red Hat Marketplace Operator Config custom resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created STEP 5 /5: Checking for Razee resources to be created... pod/featureflagsetld-controller-8565b84c74-kz5vt condition met pod/managedset-controller-795445978d-x98c4 condition met pod/mustachetemplate-controller-84567c4bff-ghzhj condition met pod/remoteresource-controller-f4465cf4d-hbsqg condition met pod/remoteresources3-controller-7cbc7d7db9-jhtkb condition met pod/remoteresources3decrypt-controller-6b4d999b6-jgzzw condition met pod/watch-keeper-8668c5798c-jmjms condition met Red Hat Marketplace Operator successfully installed Few additional steps are required to make the cluster global pull secret work in CodeReady Containers. Run oc get secret pull-secret -n openshift-config --output=\"jsonpath={.data.\\.dockerconfigjson}\" | base64 --decode and copy the output. Get the node name by running oc get node Debug the node using oc debug node/<nodename> When the debug pod comes up, chroot /host Replace the content in '/var/lib/kubelet/config.json' with the output copied earlier from the oc get secret .. command. exit to exit debug pod Run crc stop and then crc start oc get node NAME STATUS ROLES AGE VERSION crc-m27h4-master-0 Ready master,worker 9d v1.17.1 $ oc debug node/crc-m27h4-master-0 Starting pod/crc-m27h4-master-0-debug ... To use host binaries, run ` chroot /host ` Pod IP: 192 .168.126.11 If you don ' t see a command prompt, try pressing enter. sh-4.2# chroot /host sh-4.4# vi /var/lib/kubelet/config.json sh-4.4# sh-4.4# exit exit sh-4.2# exit exit Removing debug pod ... This completes the cluster setup in the Marketplace. Marketplace products are ready to install after the cluster comes up.","title":"Add CodeReady Containers Cluster"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#install-product","text":"The marketplace offers a wide variety of products across twelve categories. Let's see how a developer can try Cortex Certifai. Create a project cortex-certifai-test in your CodeReady Containers cluster. Go to the Marketplace catalog and search for Cortex Certifai. Select the tile and click on Free trial to start your 30 days trial. Go to Workspace > My Software and click on the Install operator icon. Select the CodeReady Containers cluster from the list of Target clusters and then pick the Namespace Scope where the operator should get installed. Login to the cluster to verify the operator installed successfully. Proceed to the Cortex Certifai Operator tab to install operands or instances for the Cortex Certifai operator. The operators can be installed directly from the cluster. The Red Hat Marketplace operators become available in the Operator Hub catalog after the Marketplace operator is installed. To install a product directly from the CodeReady Containers, login to the cluster, go to Operators > OperatorHub , search and install. Note: Marketplace should appear as a filter parameter under Product type in the OpertorHub search options.","title":"Install product"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#uninstalling-an-operator","text":"Uninstall the Cortex Certifai operator by selecting the Uninstall Operator . The operator for the cluster will automatically delist from the Marketplace product operators page.","title":"Uninstalling an Operator"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#installing-products-using-cli-commands","text":"This section covers the steps to install E.D.D.I chatbot operator using CLI commands. The general instructions to install an operator is available here . Prior to using CLI install, ensure the entitlement for the software exists in the Red Hat Marketplace. Disclaimer: The operators installed using the CLI will not show up in the list of installed opertroars in Red Hat Marketplace. Get the list of Red Hat Marketplace Operators: oc get packagemanifests -n openshift-marketplace | grep Marketplace Find the package name for E.D.D.I Operator oc get packagemanifests -n openshift-marketplace | grep eddi eddi-operator-certified Certified Operators 16d eddi-operator-certified-rhmp Red Hat Marketplace 16d Describe the package eddi-operator-certified-rhmp : oc describe packagemanifests eddi-operator-certified-rhmp -n openshift-marketplace Use the commands above to gather the information required to generate the Operator group and Operator subscription yaml files. Operator group (eddioperatorgroup.yaml): apiVersion : operators.coreos.com/v1 kind : OperatorGroup metadata : name : eddi-og-redhat-marketplace namespace : eddi-trial spec : targetNamespaces : - eddi-trial Operator subscritpion (eddisub.yaml): apiVersion : operators.coreos.com/v1alpha1 kind : Subscription metadata : name : eddi-operator-certified-rhmp namespace : eddi-trial spec : channel : alpha name : eddi-operator-certified-rhmp source : redhat-marketplace sourceNamespace : openshift-marketplace Install the EDDI Operator: oc apply -f eddioperatorgroup.yaml operatorgroup.operators.coreos.com/eddi-og-redhat-marketplace unchanged $ oc apply -f eddisub.yaml subscription.operators.coreos.com/eddi-operator-certified-rhmp created Ensure the subscription installed properly by running the command: oc describe sub eddi-operator-certified-rhmp -n eddi-trial | grep -A5 Conditions Conditions: Last Transition Time: 2020 -06-13T02:36:36Z Message: all available catalogsources are healthy Reason: AllCatalogSourcesHealthy Status: False Type: CatalogSourcesUnhealthy","title":"Installing products using CLI commands"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#troubleshooting","text":"Commands to troubleshoot CodeReady Containers can be found here The error below indicates the necessary entitlement does not exist for the product in Red Hat Marketplace: Failed to pull image \"registry.marketplace.redhat.com/rhm/labsai/eddi-operator@sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75\" : rpc error: code = Unknown desc = Error reading manifest sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75 in registry.marketplace.redhat.com/rhm/labsai/eddi-operator: errors: denied: requested access to the resource is denied unauthorized: authentication required","title":"Troubleshooting"},{"location":"articles/rhm-crc/rhm-with-crc-with-cli/#conclusion","text":"With the ability to install Red Hat Marketplace products on CodeReady Containers, developers get the flexibility to try and test Marketplace products on their workstations early in the application development lifecycle.","title":"Conclusion"},{"location":"articles/rhm-crc/rhm-with-crc/","text":"Using CodeReady Containers with Marketplace \u00b6 CodeReady Containers \u00b6 CodeReady Containers is the quickest way for developers to get started with OpenShift 4.1 or newer clusters. It is designed to run on a local computer to simplify setup and testing to emulate the cloud development environment locally with all the tools needed to develop container-based apps. Red Hat Marketplace was created to help developers using Red Hat OpenShift, to build solutions and deploy them across hybrid cloud as well as developer's workstation running CodeReady Containers. This article will walk you through the steps of setting up the Marketplace and installing containerized products in a CodeReady Container based OpenShift cluster. Install CodeReady Containers \u00b6 CodeReady Containers is delivered as a Red Hat Enterprise Linux virtual machine that supports native hypervisors for Linux, macOS, and Windows 10. This tutorial will use CodeReady Containers v1.11 (with OpenShift 4.5) on Mac. The install process requires you to login with your Red Hat id and download the CodeReady Containers archive along with the pull secret file. Follow the installation instructions as shown in this article . The messages shown below indicate the crc setup command completed successfully. INFO Checking if oc binary is cached INFO Caching oc binary INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Caching goodhosts binary INFO Will use root access: change ownership of /Users/rojan/.crc/bin/goodhosts INFO Will use root access: set suid for /Users/rojan/.crc/bin/goodhosts INFO Checking if CRC bundle is cached in '$HOME/.crc' INFO Unpacking bundle from the CRC binary INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Setting up virtualization with HyperKit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/hyperkit INFO Checking if crc-driver-hyperkit is installed INFO Installing crc-machine-hyperkit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Checking file permissions for /etc/resolver/testing INFO Setting file permissions for /etc/resolver/testing INFO Will use root access: create file /etc/resolver/testing INFO Will use root access: change ownership of /etc/resolver/testing Setup is complete, you can now run 'crc start' to start the OpenShift cluster Start CodeReady Containers \u00b6 After the setup is complete, start CodeReady Containers by running the command crc start or crc start -p pull-secret.txt . Ensure your VPN sessions are turned off as this can result in an improper start. crc start INFO Checking if oc binary is cached INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Checking if crc-driver-hyperkit is installed INFO Checking file permissions for /etc/resolver/testing ? Image pull secret [ ? for help ] ******************************************************************************************************************** INFO Extracting bundle: crc_hyperkit_4.4.5.crcbundle ... ******************************************************************************************************************* INFO Checking size of the disk image /Users/rojan/.crc/cache/crc_hyperkit_4.4.5/crc.qcow2 ... ****************************************************************************** INFO Creating CodeReady Containers VM for OpenShift 4 .4.5... *************************************************************************************************************** INFO CodeReady Containers VM is running ************************************************************************************************************************** INFO Verifying validity of the cluster certificates ... ******************************************************************************************************************** INFO Restarting the host network ************************************************************************************************************************** INFO Check internal and public DNS query ... ************************************************************************************************************************** INFO Check DNS query from host ... ************************************************************************************************************************** INFO Generating new SSH key ************************************************************************************************************************** INFO Copying kubeconfig file to instance dir ... ************************************************************************************************************************** INFO Starting OpenShift kubelet service ************************************************************************************************************************** INFO Configuring cluster for first start ************************************************************************************************************************** INFO Adding user 's pull secret ... ************************************************************************************************************************** INFO Updating cluster ID ... INFO Starting OpenShift cluster ... [waiting 3m] INFO INFO To access the cluster, first set up your environment by following ' crc oc-env ' instructions INFO Then you can access it by running ' oc login -u developer -p developer https://api.crc.testing:6443 ' INFO To login as an admin, run ' oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 ' INFO INFO You can now run ' crc console ' and use these credentials to access the OpenShift web console Started the OpenShift cluster WARN The cluster might report a degraded or error state. This is expected since several operators have been disabled to lower the resource usage. For more information, please consult the documentation Note: Save the login credentials for later use. The cluster started in a degraded state. The difference between CodeReady Containers and a production OpenShift cluster is summarized here . Run the command below to ensure the correct oc is set up in the path: eval $( crc oc-env ) Verify the cluster is running by running the command crc console to open the cluster console. Login as admin using the credentials from the crc start command. Install Marketplace Prerequisites \u00b6 Setting up a Marketplace account and a deployment key is described in this article . OpenShift CLI and jq plugins are the other prerequisites to run the Marketplace install script. OpenShift CLI comes with the CodeReady Containers install. Add CodeReady Containers Cluster \u00b6 Login as admin from the command window using the credentials from the crc start command. oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 The server uses a certificate signed by an unknown authority. You can bypass the certificate check, but any data you send to the server could be intercepted by others. Use insecure connections? ( y/n ) : y Login successful. You have access to 57 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . Select Workspace > Clusters and click on Add cluster. Enter a name for your CodeReady Containers cluster. Copy the install script command and then click on the Add Cluster button. Now, run the install script at the command window to install the Marketplace Operator into your cluster. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> Note: The account-id and cluster-uuid are pre-populated and use the deployment-key provisioned from your marketplace account. The source code for Marketplace Operator is available at https://github.com/redhat-marketplace/redhat-marketplace-operator Following messages indicate a successful install of the Marketplace operator: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== Detected the following options: > Account Id: be3245669cea4170013ew34253 > Cluster UUID: afda7034-402f-4f34-8f59-4954d12f8c32 > Deployment Key: dzJhbGciOiJIUzMNNiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhXXd35msOpOjE1ODM4NjYwMzIsImp0aSI6IjUyOWM0ZTU5Njk2ZDRjNWQ4ZGQyZTXXb5ZDdlIn0.eXyDgQ2Zg5aC3AhoEaDFGD66K8k638KnG-vu2YgGWbg > Approval Strategy: Automatic Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace... Installing Red Hat Marketplace Operator... STEP 2 /5: Applying global pull secret... W0605 16 :06:16.568278 47812 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. info: pull-secret was not changed Applying global pull secret succeeded STEP 3 /5: Installing the Red Hat Marketplace Operator. This might take several minutes... namespace/openshift-redhat-marketplace created operatorgroup.operators.coreos.com/redhat-marketplace-operator created secret/rhm-operator-secret created subscription.operators.coreos.com/redhat-marketplace-operator created Checking for Cluster Service Version... Checking for Custom Resource Definition... STEP 4 /5: Creating Red Hat Marketplace Operator Config custom resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created STEP 5 /5: Checking for Razee resources to be created... pod/featureflagsetld-controller-8565b84c74-kz5vt condition met pod/managedset-controller-795445978d-x98c4 condition met pod/mustachetemplate-controller-84567c4bff-ghzhj condition met pod/remoteresource-controller-f4465cf4d-hbsqg condition met pod/remoteresources3-controller-7cbc7d7db9-jhtkb condition met pod/remoteresources3decrypt-controller-6b4d999b6-jgzzw condition met pod/watch-keeper-8668c5798c-jmjms condition met Red Hat Marketplace Operator successfully installed Few additional steps are required to make the cluster global pull secret work in CodeReady Containers. Run oc get secret pull-secret -n openshift-config --output=\"jsonpath={.data.\\.dockerconfigjson}\" | base64 --decode and copy the output. Get the node name by running oc get node Debug the node using oc debug node/<nodename> When the debug pod comes up, chroot /host Replace the content in '/var/lib/kubelet/config.json' with the output copied earlier from the oc get secret .. command. exit to exit debug pod Run crc stop and then crc start oc get node NAME STATUS ROLES AGE VERSION crc-m27h4-master-0 Ready master,worker 9d v1.17.1 $ oc debug node/crc-m27h4-master-0 Starting pod/crc-m27h4-master-0-debug ... To use host binaries, run ` chroot /host ` Pod IP: 192 .168.126.11 If you dont see a command prompt, try pressing enter. sh-4.2# chroot /host sh-4.4# vi /var/lib/kubelet/config.json sh-4.4# sh-4.4# exit exit sh-4.2# exit exit Removing debug pod ... This completes the cluster setup in the Marketplace. Marketplace products are ready to install after the cluster comes up. Install product \u00b6 The marketplace offers a wide variety of products across twelve categories. Let's see how a developer can tryout Cortex Certifai. Create a project cortex-certifai-test in your CodeReady Containers cluster. Go to the Marketplace catalog and search for Cortex Certifai. Select the tile and click on Free trial to start your 30 days trial. Go to Workspace > My Software and click on the Install operator icon. Select the CodeReady Containers cluster from the list of Target clusters and then pick the Namespace Scope where the operator should get installed. Login to the cluster to verify the operator installed successfully. Proceed to the Cortex Certifai Operator tab to install operands or instances for the Cortex Certifai operator. The operators can be installed directly from the cluster. The Red Hat Marketplace operators become available in the Operator Hub catalog after the Marketplace operator is installed. To install a product directly from the CodeReady Containers, login to the cluster, go to Operators > OperatorHub , search and install. Note: Marketplace should appear as a filter parameter under Product type in the OpertorHub search options. Uninstalling an Operator \u00b6 Uninstall the Cortex Certifai operator by selecting the Uninstall Operator . The operator for the cluster will automatically delist from the Marketplace product operators page. Conclusion \u00b6 With the ability to install Red Hat Marketplace products on CodeReady Containers, developers get the flexibility to try and test Marketplace products on their workstations early in the application development lifecycle.","title":"Using CodeReady Containers with Marketplace"},{"location":"articles/rhm-crc/rhm-with-crc/#using-codeready-containers-with-marketplace","text":"","title":"Using CodeReady Containers with Marketplace"},{"location":"articles/rhm-crc/rhm-with-crc/#codeready-containers","text":"CodeReady Containers is the quickest way for developers to get started with OpenShift 4.1 or newer clusters. It is designed to run on a local computer to simplify setup and testing to emulate the cloud development environment locally with all the tools needed to develop container-based apps. Red Hat Marketplace was created to help developers using Red Hat OpenShift, to build solutions and deploy them across hybrid cloud as well as developer's workstation running CodeReady Containers. This article will walk you through the steps of setting up the Marketplace and installing containerized products in a CodeReady Container based OpenShift cluster.","title":"CodeReady Containers"},{"location":"articles/rhm-crc/rhm-with-crc/#install-codeready-containers","text":"CodeReady Containers is delivered as a Red Hat Enterprise Linux virtual machine that supports native hypervisors for Linux, macOS, and Windows 10. This tutorial will use CodeReady Containers v1.11 (with OpenShift 4.5) on Mac. The install process requires you to login with your Red Hat id and download the CodeReady Containers archive along with the pull secret file. Follow the installation instructions as shown in this article . The messages shown below indicate the crc setup command completed successfully. INFO Checking if oc binary is cached INFO Caching oc binary INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Caching goodhosts binary INFO Will use root access: change ownership of /Users/rojan/.crc/bin/goodhosts INFO Will use root access: set suid for /Users/rojan/.crc/bin/goodhosts INFO Checking if CRC bundle is cached in '$HOME/.crc' INFO Unpacking bundle from the CRC binary INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Setting up virtualization with HyperKit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/hyperkit INFO Checking if crc-driver-hyperkit is installed INFO Installing crc-machine-hyperkit INFO Will use root access: change ownership of /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Will use root access: set suid for /Users/rojan/.crc/bin/crc-driver-hyperkit INFO Checking file permissions for /etc/resolver/testing INFO Setting file permissions for /etc/resolver/testing INFO Will use root access: create file /etc/resolver/testing INFO Will use root access: change ownership of /etc/resolver/testing Setup is complete, you can now run 'crc start' to start the OpenShift cluster","title":"Install CodeReady Containers"},{"location":"articles/rhm-crc/rhm-with-crc/#start-codeready-containers","text":"After the setup is complete, start CodeReady Containers by running the command crc start or crc start -p pull-secret.txt . Ensure your VPN sessions are turned off as this can result in an improper start. crc start INFO Checking if oc binary is cached INFO Checking if podman remote binary is cached INFO Checking if goodhosts binary is cached INFO Checking if running as non-root INFO Checking if HyperKit is installed INFO Checking if crc-driver-hyperkit is installed INFO Checking file permissions for /etc/resolver/testing ? Image pull secret [ ? for help ] ******************************************************************************************************************** INFO Extracting bundle: crc_hyperkit_4.4.5.crcbundle ... ******************************************************************************************************************* INFO Checking size of the disk image /Users/rojan/.crc/cache/crc_hyperkit_4.4.5/crc.qcow2 ... ****************************************************************************** INFO Creating CodeReady Containers VM for OpenShift 4 .4.5... *************************************************************************************************************** INFO CodeReady Containers VM is running ************************************************************************************************************************** INFO Verifying validity of the cluster certificates ... ******************************************************************************************************************** INFO Restarting the host network ************************************************************************************************************************** INFO Check internal and public DNS query ... ************************************************************************************************************************** INFO Check DNS query from host ... ************************************************************************************************************************** INFO Generating new SSH key ************************************************************************************************************************** INFO Copying kubeconfig file to instance dir ... ************************************************************************************************************************** INFO Starting OpenShift kubelet service ************************************************************************************************************************** INFO Configuring cluster for first start ************************************************************************************************************************** INFO Adding user 's pull secret ... ************************************************************************************************************************** INFO Updating cluster ID ... INFO Starting OpenShift cluster ... [waiting 3m] INFO INFO To access the cluster, first set up your environment by following ' crc oc-env ' instructions INFO Then you can access it by running ' oc login -u developer -p developer https://api.crc.testing:6443 ' INFO To login as an admin, run ' oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 ' INFO INFO You can now run ' crc console ' and use these credentials to access the OpenShift web console Started the OpenShift cluster WARN The cluster might report a degraded or error state. This is expected since several operators have been disabled to lower the resource usage. For more information, please consult the documentation Note: Save the login credentials for later use. The cluster started in a degraded state. The difference between CodeReady Containers and a production OpenShift cluster is summarized here . Run the command below to ensure the correct oc is set up in the path: eval $( crc oc-env ) Verify the cluster is running by running the command crc console to open the cluster console. Login as admin using the credentials from the crc start command.","title":"Start CodeReady Containers"},{"location":"articles/rhm-crc/rhm-with-crc/#install-marketplace-prerequisites","text":"Setting up a Marketplace account and a deployment key is described in this article . OpenShift CLI and jq plugins are the other prerequisites to run the Marketplace install script. OpenShift CLI comes with the CodeReady Containers install.","title":"Install Marketplace Prerequisites"},{"location":"articles/rhm-crc/rhm-with-crc/#add-codeready-containers-cluster","text":"Login as admin from the command window using the credentials from the crc start command. oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443 The server uses a certificate signed by an unknown authority. You can bypass the certificate check, but any data you send to the server could be intercepted by others. Use insecure connections? ( y/n ) : y Login successful. You have access to 57 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . Select Workspace > Clusters and click on Add cluster. Enter a name for your CodeReady Containers cluster. Copy the install script command and then click on the Add Cluster button. Now, run the install script at the command window to install the Marketplace Operator into your cluster. curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-rhm-operator | bash -s <account-id> <cluster-uuid> <deployment-key> Note: The account-id and cluster-uuid are pre-populated and use the deployment-key provisioned from your marketplace account. The source code for Marketplace Operator is available at https://github.com/redhat-marketplace/redhat-marketplace-operator Following messages indicate a successful install of the Marketplace operator: ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== Detected the following options: > Account Id: be3245669cea4170013ew34253 > Cluster UUID: afda7034-402f-4f34-8f59-4954d12f8c32 > Deployment Key: dzJhbGciOiJIUzMNNiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhXXd35msOpOjE1ODM4NjYwMzIsImp0aSI6IjUyOWM0ZTU5Njk2ZDRjNWQ4ZGQyZTXXb5ZDdlIn0.eXyDgQ2Zg5aC3AhoEaDFGD66K8k638KnG-vu2YgGWbg > Approval Strategy: Automatic Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace... Installing Red Hat Marketplace Operator... STEP 2 /5: Applying global pull secret... W0605 16 :06:16.568278 47812 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. info: pull-secret was not changed Applying global pull secret succeeded STEP 3 /5: Installing the Red Hat Marketplace Operator. This might take several minutes... namespace/openshift-redhat-marketplace created operatorgroup.operators.coreos.com/redhat-marketplace-operator created secret/rhm-operator-secret created subscription.operators.coreos.com/redhat-marketplace-operator created Checking for Cluster Service Version... Checking for Custom Resource Definition... STEP 4 /5: Creating Red Hat Marketplace Operator Config custom resource... marketplaceconfig.marketplace.redhat.com/marketplaceconfig created STEP 5 /5: Checking for Razee resources to be created... pod/featureflagsetld-controller-8565b84c74-kz5vt condition met pod/managedset-controller-795445978d-x98c4 condition met pod/mustachetemplate-controller-84567c4bff-ghzhj condition met pod/remoteresource-controller-f4465cf4d-hbsqg condition met pod/remoteresources3-controller-7cbc7d7db9-jhtkb condition met pod/remoteresources3decrypt-controller-6b4d999b6-jgzzw condition met pod/watch-keeper-8668c5798c-jmjms condition met Red Hat Marketplace Operator successfully installed Few additional steps are required to make the cluster global pull secret work in CodeReady Containers. Run oc get secret pull-secret -n openshift-config --output=\"jsonpath={.data.\\.dockerconfigjson}\" | base64 --decode and copy the output. Get the node name by running oc get node Debug the node using oc debug node/<nodename> When the debug pod comes up, chroot /host Replace the content in '/var/lib/kubelet/config.json' with the output copied earlier from the oc get secret .. command. exit to exit debug pod Run crc stop and then crc start oc get node NAME STATUS ROLES AGE VERSION crc-m27h4-master-0 Ready master,worker 9d v1.17.1 $ oc debug node/crc-m27h4-master-0 Starting pod/crc-m27h4-master-0-debug ... To use host binaries, run ` chroot /host ` Pod IP: 192 .168.126.11 If you dont see a command prompt, try pressing enter. sh-4.2# chroot /host sh-4.4# vi /var/lib/kubelet/config.json sh-4.4# sh-4.4# exit exit sh-4.2# exit exit Removing debug pod ... This completes the cluster setup in the Marketplace. Marketplace products are ready to install after the cluster comes up.","title":"Add CodeReady Containers Cluster"},{"location":"articles/rhm-crc/rhm-with-crc/#install-product","text":"The marketplace offers a wide variety of products across twelve categories. Let's see how a developer can tryout Cortex Certifai. Create a project cortex-certifai-test in your CodeReady Containers cluster. Go to the Marketplace catalog and search for Cortex Certifai. Select the tile and click on Free trial to start your 30 days trial. Go to Workspace > My Software and click on the Install operator icon. Select the CodeReady Containers cluster from the list of Target clusters and then pick the Namespace Scope where the operator should get installed. Login to the cluster to verify the operator installed successfully. Proceed to the Cortex Certifai Operator tab to install operands or instances for the Cortex Certifai operator. The operators can be installed directly from the cluster. The Red Hat Marketplace operators become available in the Operator Hub catalog after the Marketplace operator is installed. To install a product directly from the CodeReady Containers, login to the cluster, go to Operators > OperatorHub , search and install. Note: Marketplace should appear as a filter parameter under Product type in the OpertorHub search options.","title":"Install product"},{"location":"articles/rhm-crc/rhm-with-crc/#uninstalling-an-operator","text":"Uninstall the Cortex Certifai operator by selecting the Uninstall Operator . The operator for the cluster will automatically delist from the Marketplace product operators page.","title":"Uninstalling an Operator"},{"location":"articles/rhm-crc/rhm-with-crc/#conclusion","text":"With the ability to install Red Hat Marketplace products on CodeReady Containers, developers get the flexibility to try and test Marketplace products on their workstations early in the application development lifecycle.","title":"Conclusion"},{"location":"cloud-developer-toolset/cloud-development-toolset/","text":"Lab: CodeReady Workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create your CodeReady Workspace \u00b6","title":"Lab: CodeReady Workspaces"},{"location":"cloud-developer-toolset/cloud-development-toolset/#lab-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Lab: CodeReady Workspaces"},{"location":"cloud-developer-toolset/cloud-development-toolset/#create-your-codeready-workspace","text":"","title":"Create your CodeReady Workspace"},{"location":"cloud-developer-toolset/cloud-development-toolset/build-with-crw/","text":"Lab 2: Build with CRW \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot stack. Use the Eclipse Che - Theia based editor to make code changes. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create your CodeReady Workspace \u00b6 Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the Springboot stack. Add Git repo and Click CREATE & OPEN Add or Import Project , select Git and the repo URL you forked earlier. https://github.com/<username>/rhoar-backend And fill it out something like this. You will see this will not result in a new build. If you want to start a manual build you can do so by clicking Start Build . We will skip this for now and move on to the webhook part.","title":"Lab 2: Build with CRW"},{"location":"cloud-developer-toolset/cloud-development-toolset/build-with-crw/#lab-2-build-with-crw","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot stack. Use the Eclipse Che - Theia based editor to make code changes. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Lab 2: Build with CRW"},{"location":"cloud-developer-toolset/cloud-development-toolset/build-with-crw/#create-your-codeready-workspace","text":"Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"cloud-developer-toolset/cloud-development-toolset/build-with-crw/#create-a-new-workspace","text":"Create a new workspace using the Springboot stack. Add Git repo and Click CREATE & OPEN Add or Import Project , select Git and the repo URL you forked earlier. https://github.com/<username>/rhoar-backend And fill it out something like this. You will see this will not result in a new build. If you want to start a manual build you can do so by clicking Start Build . We will skip this for now and move on to the webhook part.","title":"Create a new workspace"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/","text":"Lab 1: Explore CRW \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create your CodeReady Workspace \u00b6 Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: \\(takes about 2-5 minutes to startup\\) TODO: show the pod that runs the workspace. Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar. Define and exectue commands from the workspace \u00b6 The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html Run the project in the debug mode \u00b6 Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System.out.println(\"Testing break point...\"); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI. Push the code changes back in the Git repo \u00b6 Commit changes Push changes Customize workspace to meet your project requirements \u00b6 Use of factory to share workspaces with your development team \u00b6","title":"Lab 1: Explore CRW"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#lab-1-explore-crw","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Lab 1: Explore CRW"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#create-your-codeready-workspace","text":"Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#create-a-new-workspace","text":"Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: \\(takes about 2-5 minutes to startup\\) TODO: show the pod that runs the workspace.","title":"Create a new workspace"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar.","title":"Explore Che-Theia editor"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#define-and-exectue-commands-from-the-workspace","text":"The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html","title":"Define and exectue commands from the workspace"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#run-the-project-in-the-debug-mode","text":"Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System.out.println(\"Testing break point...\"); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI.","title":"Run the project in the debug mode"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#push-the-code-changes-back-in-the-git-repo","text":"Commit changes Push changes","title":"Push the code changes back in the Git repo"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#customize-workspace-to-meet-your-project-requirements","text":"","title":"Customize workspace to meet your project requirements"},{"location":"cloud-developer-toolset/cloud-development-toolset/explore-crw/#use-of-factory-to-share-workspaces-with-your-development-team","text":"","title":"Use of factory to share workspaces with your development team"},{"location":"cloud-developer-toolset/cloud-development-toolset/lab-0/","text":"Pre-work \u00b6","title":"Pre-work"},{"location":"cloud-developer-toolset/cloud-development-toolset/lab-0/#pre-work","text":"","title":"Pre-work"},{"location":"cloud-developer-toolset/cloud-development-toolset/publish-workspaces/","text":"Lab 3: Publishing Workspaces \u00b6","title":"Lab 3: Publishing Workspaces"},{"location":"cloud-developer-toolset/cloud-development-toolset/publish-workspaces/#lab-3-publishing-workspaces","text":"","title":"Lab 3: Publishing Workspaces"},{"location":"getting-started/pre-work/","text":"Pre-work \u00b6 This section is broken up into the following steps: 1. Github account \u00b6 Create a personal Github account at github.com or use your existing account. 2. Sign up for IBM Cloud \u00b6 You will need an IBM Cloud ID for the workshop. If you already have an IBM Cloud ID, proceed to the next section. Follow the steps outlined here to create a new account.","title":"Pre-work"},{"location":"getting-started/pre-work/#pre-work","text":"This section is broken up into the following steps:","title":"Pre-work"},{"location":"getting-started/pre-work/#1-github-account","text":"Create a personal Github account at github.com or use your existing account.","title":"1. Github account"},{"location":"getting-started/pre-work/#2-sign-up-for-ibm-cloud","text":"You will need an IBM Cloud ID for the workshop. If you already have an IBM Cloud ID, proceed to the next section. Follow the steps outlined here to create a new account.","title":"2. Sign up for IBM Cloud"},{"location":"modules/marketplace/rhm-account-setup/","text":"Account Setup \u00b6 Persona Mapping \u00b6 Start with mapping the users in your organization to the roles defined in the Marketplace. Use the spreadsheet linked here to map the user roles. Register \u00b6 All participants are required to register on the Marketplace Use your corporate email id to create a new account. Select \"Continue with IBMid\" if you have already an IBMid. Use a credit card during the payment method step. [Note: Payment step is not required for whitelisted accounts. Software trials will not incur any charges on the credit card.] Account Owner: Setting up the Organization \u00b6 Change the name of the organization to <Organization name> RHM Jumpstart under My account > Account settings > Account information Account Owner: Invite users \u00b6 Go to My account > My team page. Use the persona mapping sheet to invite users into this organization. All invited users will receive an email asking them to join the new organization. Follow the link in the email to accept the invitation. All other users should now see their personal accounts and the organization account under the account list. All users: verify organization memmbership \u00b6 Switch to the Organization account and navigate to the My team page. Validate that your role is showing correctly. This completes the Account setup task. Let's move on to Admin tasks next.","title":"Account setup"},{"location":"modules/marketplace/rhm-account-setup/#account-setup","text":"","title":"Account Setup"},{"location":"modules/marketplace/rhm-account-setup/#persona-mapping","text":"Start with mapping the users in your organization to the roles defined in the Marketplace. Use the spreadsheet linked here to map the user roles.","title":"Persona Mapping"},{"location":"modules/marketplace/rhm-account-setup/#register","text":"All participants are required to register on the Marketplace Use your corporate email id to create a new account. Select \"Continue with IBMid\" if you have already an IBMid. Use a credit card during the payment method step. [Note: Payment step is not required for whitelisted accounts. Software trials will not incur any charges on the credit card.]","title":"Register"},{"location":"modules/marketplace/rhm-account-setup/#account-owner-setting-up-the-organization","text":"Change the name of the organization to <Organization name> RHM Jumpstart under My account > Account settings > Account information","title":"Account Owner: Setting up the Organization"},{"location":"modules/marketplace/rhm-account-setup/#account-owner-invite-users","text":"Go to My account > My team page. Use the persona mapping sheet to invite users into this organization. All invited users will receive an email asking them to join the new organization. Follow the link in the email to accept the invitation. All other users should now see their personal accounts and the organization account under the account list.","title":"Account Owner: Invite users"},{"location":"modules/marketplace/rhm-account-setup/#all-users-verify-organization-memmbership","text":"Switch to the Organization account and navigate to the My team page. Validate that your role is showing correctly. This completes the Account setup task. Let's move on to Admin tasks next.","title":"All users: verify organization memmbership"},{"location":"modules/marketplace/rhm-cluster-setup-old/","text":"Cluster Setup \u00b6 OpenShift clusters must be added to your Marketplace workspace prior to deploying software from the marketplace. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private and can be added to the list as long as the cluster can communicate with the Marketplace server. The cluster setup process will be completed by the cluster admins. This workshop will use OpenShift clusters on AWS and IBM Cloud. Prerequisites \u00b6 OpenShift Cluster: Use the IBM Cloud OpenShift clusters provided by the instructors for this exercise. [Optionally, use your local CRC clusters if it is setup in preperation for this workshop. Pull secret: A pull secret is required to link your OpenShift cluster to the Marketplace. Select the drop-down from the top right corner and go to the My Account > Pull secrets page. Replace ##username## as shown in the screen below with your assinged username. Marketplace operator is installed using OpenShift CLI and jq JSON processor. These tools are preinstalled for you in your workshop web terminal environemnt. Copy the key and save it in TODO: your workspace for later use prior to clicking the Save button. Add ROKS cluster \u00b6 Follow the steps below to add cluster to your workspace: Create namespace for Marketplace operator \u00b6 Open the web terminal and click on the expan icon to launch the terminal in a new brower tab. Run the commands oc version and jq --version to ensure the prerequisties are install. Welcome to the IBM Cloud Kubernetes terminal, rojan! To get started, run ibmcloud ks Note: Any files that you download and edit locally, such as YAML files, are stored temporarily in Kube Terminal and are not guaranteed to persist across sessions. Note: To use the Kube Terminal for VPC clusters, enable a public gateway on each subnet or edit the KUBECONFIG file to use the private service endpoint. For more info, see 'https://ibm.biz/kube-terminal' . rojan@k8s-terminal ~ ( \u2388 rj-bp-rhm-demo/brg4n58w0ddv528hdnlg:default ) $ oc version Client Version: openshift-clients-4.2.2-201910250432-12-g72076900 Kubernetes Version: v1.16.2+18cfcc9 rojan@k8s-terminal ~ ( \u2388 rj-bp-rhm-demo/brg4n58w0ddv528hdnlg:default ) $ jq --version jq-master-v20190408-1671-g3fd4a8c851 Login to the cluster using the admin credentials. Navigate to the cluster console using the link provided by the instructor. Click on Copy Login Command and then on the Display link. Copy the login command and run it on the web terminal. johndoe@k8s-terminal ~ ( \u2388 default/c100-e-us-east-containers-cloud-ibm-com:32331/IAM#rojan@us.ibm.com:default ) $ oc login --token = w2SZpqbEl0yzIUqF6H5c0vkf4i2DQZb_FZkuZ2ElJ1s --server = https://c100-e.us-east.containers.cloud.ibm.com:32331 Logged into \"https://c100-e.us-east.containers.cloud.ibm.com:32331\" as \"IAM#rojan@us.ibm.com\" using the token provided. You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . johndoe@k8s-terminal ~ ( \u2388 default/c100-e-us-east-containers-cloud-ibm-com:32331/IAM#rojan@us.ibm.com:default ) $ Adding cluster \u00b6 Go to Workspace > Clusters and click on Add Cluster button. Enter a cluster name with user name prefix. Enter a pull secret with user name prefix and click on the Generate Secret button. Click on the Download pull secret link to save the secret for the later step. Click on the Add Cluster button to compelete the add cluster step. Register cluster \u00b6 Get pods for marketplace. oc get pods --namespace openshift-redhat-marketplace NAME READY STATUS RESTARTS AGE clustersubscription-6b54d4766b-jn7jn 1 /1 Running 0 32d featureflagsetld-controller-8565b84c74-k7m9h 1 /1 Running 0 32d managedset-controller-795445978d-qtsqf 1 /1 Running 0 32d mustachetemplate-controller-84567c4bff-b6tck 1 /1 Running 0 32d redhat-marketplace-operator-778f6b6848-rpjlx 1 /1 Running 0 24h remoteresource-controller-f4465cf4d-4jxw4 1 /1 Running 0 32d remoteresources3-controller-7cbc7d7db9-hzq28 1 /1 Running 0 32d remoteresources3decrypt-controller-6b4d999b6-bxjs6 1 /1 Running 0 32d watch-keeper-65447877d4-m42kc 1 /1 Running 0 5d22h Validate add clusters \u00b6 Can other participants see the clusters that were added? Uninstalling Marketplace operator \u00b6 curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/uninstall-rhm-operator | bash ================================================================================== [ INFO ] Uninstall Red Hat Marketplace Operator... ================================================================================== STEP 1 /5: Deleting Marketplace Config... marketplaceconfig.marketplace.redhat.com \"marketplaceconfig\" deleted STEP 2 /5: Deleting Red Hat Marketplace Operator Secret... secret \"rhm-operator-secret\" deleted STEP 3 /5: Deleting Razee Deployment... NOTE: This could take several minutes to complete... razeedeployment.marketplace.redhat.com \"rhm-marketplaceconfig-razeedeployment\" deleted STEP 4 /5: Deleting Red Hat Marketplace Operator Subscription... subscription.operators.coreos.com \"redhat-marketplace-operator\" deleted STEP 5 /5: Deleting Red Hat Marketplace CSV... clusterserviceversion.operators.coreos.com \"redhat-marketplace-operator.v0.1.5\" deleted Red Hat Marketplace Operator successfully uninstalled Using Marketplace with CRC \u00b6 Follow the instructions as shown here to setup Marketplace on your local machine.","title":"Cluster Setup"},{"location":"modules/marketplace/rhm-cluster-setup-old/#cluster-setup","text":"OpenShift clusters must be added to your Marketplace workspace prior to deploying software from the marketplace. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private and can be added to the list as long as the cluster can communicate with the Marketplace server. The cluster setup process will be completed by the cluster admins. This workshop will use OpenShift clusters on AWS and IBM Cloud.","title":"Cluster Setup"},{"location":"modules/marketplace/rhm-cluster-setup-old/#prerequisites","text":"OpenShift Cluster: Use the IBM Cloud OpenShift clusters provided by the instructors for this exercise. [Optionally, use your local CRC clusters if it is setup in preperation for this workshop. Pull secret: A pull secret is required to link your OpenShift cluster to the Marketplace. Select the drop-down from the top right corner and go to the My Account > Pull secrets page. Replace ##username## as shown in the screen below with your assinged username. Marketplace operator is installed using OpenShift CLI and jq JSON processor. These tools are preinstalled for you in your workshop web terminal environemnt. Copy the key and save it in TODO: your workspace for later use prior to clicking the Save button.","title":"Prerequisites"},{"location":"modules/marketplace/rhm-cluster-setup-old/#add-roks-cluster","text":"Follow the steps below to add cluster to your workspace:","title":"Add ROKS cluster"},{"location":"modules/marketplace/rhm-cluster-setup-old/#create-namespace-for-marketplace-operator","text":"Open the web terminal and click on the expan icon to launch the terminal in a new brower tab. Run the commands oc version and jq --version to ensure the prerequisties are install. Welcome to the IBM Cloud Kubernetes terminal, rojan! To get started, run ibmcloud ks Note: Any files that you download and edit locally, such as YAML files, are stored temporarily in Kube Terminal and are not guaranteed to persist across sessions. Note: To use the Kube Terminal for VPC clusters, enable a public gateway on each subnet or edit the KUBECONFIG file to use the private service endpoint. For more info, see 'https://ibm.biz/kube-terminal' . rojan@k8s-terminal ~ ( \u2388 rj-bp-rhm-demo/brg4n58w0ddv528hdnlg:default ) $ oc version Client Version: openshift-clients-4.2.2-201910250432-12-g72076900 Kubernetes Version: v1.16.2+18cfcc9 rojan@k8s-terminal ~ ( \u2388 rj-bp-rhm-demo/brg4n58w0ddv528hdnlg:default ) $ jq --version jq-master-v20190408-1671-g3fd4a8c851 Login to the cluster using the admin credentials. Navigate to the cluster console using the link provided by the instructor. Click on Copy Login Command and then on the Display link. Copy the login command and run it on the web terminal. johndoe@k8s-terminal ~ ( \u2388 default/c100-e-us-east-containers-cloud-ibm-com:32331/IAM#rojan@us.ibm.com:default ) $ oc login --token = w2SZpqbEl0yzIUqF6H5c0vkf4i2DQZb_FZkuZ2ElJ1s --server = https://c100-e.us-east.containers.cloud.ibm.com:32331 Logged into \"https://c100-e.us-east.containers.cloud.ibm.com:32331\" as \"IAM#rojan@us.ibm.com\" using the token provided. You have access to 60 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . johndoe@k8s-terminal ~ ( \u2388 default/c100-e-us-east-containers-cloud-ibm-com:32331/IAM#rojan@us.ibm.com:default ) $","title":"Create namespace for Marketplace operator"},{"location":"modules/marketplace/rhm-cluster-setup-old/#adding-cluster","text":"Go to Workspace > Clusters and click on Add Cluster button. Enter a cluster name with user name prefix. Enter a pull secret with user name prefix and click on the Generate Secret button. Click on the Download pull secret link to save the secret for the later step. Click on the Add Cluster button to compelete the add cluster step.","title":"Adding cluster"},{"location":"modules/marketplace/rhm-cluster-setup-old/#register-cluster","text":"Get pods for marketplace. oc get pods --namespace openshift-redhat-marketplace NAME READY STATUS RESTARTS AGE clustersubscription-6b54d4766b-jn7jn 1 /1 Running 0 32d featureflagsetld-controller-8565b84c74-k7m9h 1 /1 Running 0 32d managedset-controller-795445978d-qtsqf 1 /1 Running 0 32d mustachetemplate-controller-84567c4bff-b6tck 1 /1 Running 0 32d redhat-marketplace-operator-778f6b6848-rpjlx 1 /1 Running 0 24h remoteresource-controller-f4465cf4d-4jxw4 1 /1 Running 0 32d remoteresources3-controller-7cbc7d7db9-hzq28 1 /1 Running 0 32d remoteresources3decrypt-controller-6b4d999b6-bxjs6 1 /1 Running 0 32d watch-keeper-65447877d4-m42kc 1 /1 Running 0 5d22h","title":"Register cluster"},{"location":"modules/marketplace/rhm-cluster-setup-old/#validate-add-clusters","text":"Can other participants see the clusters that were added?","title":"Validate add clusters"},{"location":"modules/marketplace/rhm-cluster-setup-old/#uninstalling-marketplace-operator","text":"curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/uninstall-rhm-operator | bash ================================================================================== [ INFO ] Uninstall Red Hat Marketplace Operator... ================================================================================== STEP 1 /5: Deleting Marketplace Config... marketplaceconfig.marketplace.redhat.com \"marketplaceconfig\" deleted STEP 2 /5: Deleting Red Hat Marketplace Operator Secret... secret \"rhm-operator-secret\" deleted STEP 3 /5: Deleting Razee Deployment... NOTE: This could take several minutes to complete... razeedeployment.marketplace.redhat.com \"rhm-marketplaceconfig-razeedeployment\" deleted STEP 4 /5: Deleting Red Hat Marketplace Operator Subscription... subscription.operators.coreos.com \"redhat-marketplace-operator\" deleted STEP 5 /5: Deleting Red Hat Marketplace CSV... clusterserviceversion.operators.coreos.com \"redhat-marketplace-operator.v0.1.5\" deleted Red Hat Marketplace Operator successfully uninstalled","title":"Uninstalling Marketplace operator"},{"location":"modules/marketplace/rhm-cluster-setup-old/#using-marketplace-with-crc","text":"Follow the instructions as shown here to setup Marketplace on your local machine.","title":"Using Marketplace with CRC"},{"location":"modules/marketplace/rhm-cluster-setup/","text":"Cluster Setup \u00b6 OpenShift clusters must be added to your Marketplace workspace prior to deploying software from the marketplace. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private and can be added to the list as long as the cluster can communicate with the Marketplace server. The cluster setup process will be completed by the cluster admins. This workshop will use OpenShift clusters on AWS and IBM Cloud. Use the cluster admin credentials provided by the instructors. Step 1 - Add the IBM Cloud OpenShift (ROKS) cluster \u00b6 Step 1.1 - Add cluster in the Marketplace portal \u00b6 In the Marketplace portal, go to Wrokspace > Clusters and click on Add cluster button. In the Add cluster page, enter a pull secret name and click on the button Generate Secret . Click on the download icon to save the pull secret for later use. The list of generated pull secrets is availble at My Account > Pull secrets page. Run the install script in your command line terminal. Instructions for running the script are provided in the next section. [Note that pull secret generated in the earlier step is automatically replaced as the input parameter for the install script.] Step 1.2 - Terminal access and CLI setup \u00b6 Login to IBM Cloud and switch the account setup for the workshop. Start a cloud shell by clicking on the IBM Cloud Shell icon. OpenShift CLI and jq JSON processor are the prerequisites needed to install the Marketplace operator. These tools are preinstalled in the cloud shell, however, we will upgrade the OpenShift CLI to a newer version. To upgrade the CLI, run the commands listed below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/installCLI.sh ) source ~/.profile oc version jq --version Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/installCLI.sh ) Installing CLI in /home/rojan/cli ... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 74 .6M 100 74 .6M 0 0 24 .1M 0 0 :00:03 0 :00:03 --:--:-- 24 .1M oc Client Version: openshift-clients-4.5.0-202006231303.p0-4-gb66f2d3a6 CLI install complete. Run the following command to set the path: source .profile rojan@cloudshell:~$ source ~/.profile rojan@cloudshell:~$ oc version Client Version: openshift-clients-4.5.0-202006231303.p0-4-gb66f2d3a6 rojan@cloudshell:~$ jq --version jq-1.6 Step 1.3 - Log in to OpenShift cluster \u00b6 Find the cluster in the IBM Cloud console. Click on it to open the cluster details page. Finally, click on 'OpenShift web console` button to open the console. Copy the login command. Run the login command from the CLI terminal. Step 1.4 - Install the Marketplace operator \u00b6 Run the command copied earlier from the Add cluster step in the CLI terminal. Give cluster the name rhm-jumpstart-ibmcloud when prompted during the install process. Expected output: rojanjose@cloudshell:~$ curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-operator | bash -s -- -i 5e9ccb95a85d690013d1b9e0 -p eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQ k0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk2N5M4MTUsZmp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6KTArXLnQ -a Automatic true ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== /dev/stdin: line 146 : uuidgen: command not found > Cluster Name: Edit cluster name for easy reference in Red Hat Marketplace? [ Y/n ] y Enter Cluster Name: rhm-jumpstart-ibmcloud Detected the following options: > Account Id: 5e9ccb95a85d690013d1b9e0 > Cluster Name: rhm-jumpstart-ibmcloud > Pull Secret: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk3NjM4MTUsImp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6 KTArXLnQ > Marketplace Operator Approval Strategy: Automatic Continue with installation? [ Y/n ] : Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace Installing Red Hat Marketplace Operator STEP 2 /5: Installing the Red Hat Marketplace Operator. This might take several minutes namespace/openshift-redhat-marketplace created operatorgroup.operators.coreos.com/redhat-marketplace-operator created secret/rhm-operator-secret created subscription.operators.coreos.com/redhat-marketplace-operator created Checking for Cluster Service Version Checking for Custom Resource Definition STEP 3 /5: Creating Red Hat Marketplace Operator Config custom resource marketplaceconfig.marketplace.redhat.com/marketplaceconfig created STEP 4 /5: Checking for Razee resources to be created pod/rhm-watch-keeper-cdfdcb68f-gwdzs condition met All Razee resources created successfully. STEP 5 /5: Applying global pull secret W0910 18 :53:53.656478 3441 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. W0910 18 :53:53.995073 3452 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. secret/pull-secret data updated Applying global pull secret succeeded Install complete, all resource created. ================================================================================== Red Hat Marketplace Operator successfully installed. It may take a few minutes for your cluster to show up in the Marketplace console so you can install purchased software or trials. Would you like to go back to the Red Hat Marketplace now? [ Y/n ] n rojanjose@cloudshell:~$ Verify the operator install correctly in the Installed operators page in OpenShift console. The operator is installed in the project openshift-redhat-marketplace and the status column should show Succeeded . Check the pods are up and running. $ oc get pods -n openshift-redhat-marketplace NAME READY STATUS RESTARTS AGE prometheus-operator-77dd76b6c7-jnvdr 2 /2 Running 0 9m48s prometheus-rhm-marketplaceconfig-meterbase-0 5 /5 Running 1 9m27s prometheus-rhm-marketplaceconfig-meterbase-1 5 /5 Running 1 9m27s redhat-marketplace-operator-747f7c67bd-dfbwd 1 /1 Running 0 9m37s rhm-metric-state-57c8666b5b-rsgbs 3 /3 Running 0 9m47s rhm-remoteresources3-controller-5b5558b786-c2g4q 1 /1 Running 0 9m37s rhm-watch-keeper-cdfdcb68f-gwdzs 1 /1 Running 1 9m36s Step 1.5 - Reload worker nodes \u00b6 Go to the cluster details page in the IBM Cloud console, select the Worker nodes page. Select all workers and click the Reload button. Step 2: Add AWS cluster \u00b6 Repeat the steps followed to add the ROKS cluster in order to add the second cluster running on AWS. Step 2.1 - Install Marketplace Operator \u00b6 Log into the AWS OpenShift console using the credenitals provided by the instructor. Copy the login command and run it from the CLI terminal using the credentials rojanjose@cloudshell:~$ oc login --token = maUOkoKQ5LAAlyPpNOhBxZSGezl1-4cdBCwloKH4qh8w --server = https://api.dev-advocate.rhm-awsocp.com:6443 The server uses a certificate signed by an unknown authority. You can bypass the certificate check, but any data you send to the server could be intercepted by others. Use insecure connections? ( y/n ) : y Logged into \"https://api.dev-advocate.rhm-awsocp.com:6443\" as \"kube:admin\" using the token provided. You have access to 69 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . Run the Marketplace install script copied from the earlier step. Give cluster the name rhm-jumpstart-aws when prompted during the install process. Expected output: rojanjose@cloudshell:~$ curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-operator | bash -s -- -i 5e9ccb95a85d690013d1b9e0 -p eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQ k0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk2N5M4MTUsZmp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6KTArXLnQ -a Automatic true ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== /dev/stdin: line 146 : uuidgen: command not found > Cluster Name: Edit cluster name for easy reference in Red Hat Marketplace? [ Y/n ] y Enter Cluster Name: rhm-jumpstart-aws Detected the following options: > Account Id: 5e9ccb95a85d690013d1b9e0 > Cluster Name: rhm-jumpstart-ibmcloud > Pull Secret: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk3NjM4MTUsImp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6 KTArXLnQ > Marketplace Operator Approval Strategy: Automatic Continue with installation? [ Y/n ] : Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace Installing Red Hat Marketplace Operator ..... ...... Verify the operator installed correctly under the project openshift-redhat-marketplace and the status column should show a value of Succeeded . Check the pods are up and running. $ oc get pods -n openshift-redhat-marketplace NAME READY STATUS RESTARTS AGE prometheus-operator-586c8b7696-2w8kc 2 /2 Running 0 6h34m prometheus-rhm-marketplaceconfig-meterbase-0 5 /5 Running 1 15d prometheus-rhm-marketplaceconfig-meterbase-1 5 /5 Running 0 15d redhat-marketplace-operator-7c455fcf6c-p56q6 1 /1 Running 0 15d rhm-metric-state-5fbb6d95ff-hdsjk 3 /3 Running 0 15d rhm-remoteresources3-controller-5cc6b4945b-lpc2v 1 /1 Running 0 15d rhm-watch-keeper-5ddb67c5d7-ff8mk 1 /1 Running 1 15d Step 3: Validate clusters visiblity \u00b6 All users registered with the organization account should now check the clusters page and ensure that both IBM and AWS clusters are visibile. Additional resources \u00b6 Using Marketplace with CRC \u00b6 Follow this article to setup Marketplace on your local machine.","title":"Cluster setup"},{"location":"modules/marketplace/rhm-cluster-setup/#cluster-setup","text":"OpenShift clusters must be added to your Marketplace workspace prior to deploying software from the marketplace. Marketplace provides you the flexibility to use any OpenShift cluster irrespective of its location. The cluster's location can be public or private and can be added to the list as long as the cluster can communicate with the Marketplace server. The cluster setup process will be completed by the cluster admins. This workshop will use OpenShift clusters on AWS and IBM Cloud. Use the cluster admin credentials provided by the instructors.","title":"Cluster Setup"},{"location":"modules/marketplace/rhm-cluster-setup/#step-1-add-the-ibm-cloud-openshift-roks-cluster","text":"","title":"Step 1 - Add the IBM Cloud OpenShift (ROKS) cluster"},{"location":"modules/marketplace/rhm-cluster-setup/#step-11-add-cluster-in-the-marketplace-portal","text":"In the Marketplace portal, go to Wrokspace > Clusters and click on Add cluster button. In the Add cluster page, enter a pull secret name and click on the button Generate Secret . Click on the download icon to save the pull secret for later use. The list of generated pull secrets is availble at My Account > Pull secrets page. Run the install script in your command line terminal. Instructions for running the script are provided in the next section. [Note that pull secret generated in the earlier step is automatically replaced as the input parameter for the install script.]","title":"Step 1.1 - Add cluster in the Marketplace portal"},{"location":"modules/marketplace/rhm-cluster-setup/#step-12-terminal-access-and-cli-setup","text":"Login to IBM Cloud and switch the account setup for the workshop. Start a cloud shell by clicking on the IBM Cloud Shell icon. OpenShift CLI and jq JSON processor are the prerequisites needed to install the Marketplace operator. These tools are preinstalled in the cloud shell, however, we will upgrade the OpenShift CLI to a newer version. To upgrade the CLI, run the commands listed below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/installCLI.sh ) source ~/.profile oc version jq --version Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/installCLI.sh ) Installing CLI in /home/rojan/cli ... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 74 .6M 100 74 .6M 0 0 24 .1M 0 0 :00:03 0 :00:03 --:--:-- 24 .1M oc Client Version: openshift-clients-4.5.0-202006231303.p0-4-gb66f2d3a6 CLI install complete. Run the following command to set the path: source .profile rojan@cloudshell:~$ source ~/.profile rojan@cloudshell:~$ oc version Client Version: openshift-clients-4.5.0-202006231303.p0-4-gb66f2d3a6 rojan@cloudshell:~$ jq --version jq-1.6","title":"Step 1.2 - Terminal access and CLI setup"},{"location":"modules/marketplace/rhm-cluster-setup/#step-13-log-in-to-openshift-cluster","text":"Find the cluster in the IBM Cloud console. Click on it to open the cluster details page. Finally, click on 'OpenShift web console` button to open the console. Copy the login command. Run the login command from the CLI terminal.","title":"Step 1.3 - Log in to OpenShift cluster"},{"location":"modules/marketplace/rhm-cluster-setup/#step-14-install-the-marketplace-operator","text":"Run the command copied earlier from the Add cluster step in the CLI terminal. Give cluster the name rhm-jumpstart-ibmcloud when prompted during the install process. Expected output: rojanjose@cloudshell:~$ curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-operator | bash -s -- -i 5e9ccb95a85d690013d1b9e0 -p eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQ k0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk2N5M4MTUsZmp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6KTArXLnQ -a Automatic true ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== /dev/stdin: line 146 : uuidgen: command not found > Cluster Name: Edit cluster name for easy reference in Red Hat Marketplace? [ Y/n ] y Enter Cluster Name: rhm-jumpstart-ibmcloud Detected the following options: > Account Id: 5e9ccb95a85d690013d1b9e0 > Cluster Name: rhm-jumpstart-ibmcloud > Pull Secret: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk3NjM4MTUsImp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6 KTArXLnQ > Marketplace Operator Approval Strategy: Automatic Continue with installation? [ Y/n ] : Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace Installing Red Hat Marketplace Operator STEP 2 /5: Installing the Red Hat Marketplace Operator. This might take several minutes namespace/openshift-redhat-marketplace created operatorgroup.operators.coreos.com/redhat-marketplace-operator created secret/rhm-operator-secret created subscription.operators.coreos.com/redhat-marketplace-operator created Checking for Cluster Service Version Checking for Custom Resource Definition STEP 3 /5: Creating Red Hat Marketplace Operator Config custom resource marketplaceconfig.marketplace.redhat.com/marketplaceconfig created STEP 4 /5: Checking for Razee resources to be created pod/rhm-watch-keeper-cdfdcb68f-gwdzs condition met All Razee resources created successfully. STEP 5 /5: Applying global pull secret W0910 18 :53:53.656478 3441 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. W0910 18 :53:53.995073 3452 helpers.go:549 ] --dry-run = true is deprecated ( boolean value ) and can be replaced with --dry-run = client. secret/pull-secret data updated Applying global pull secret succeeded Install complete, all resource created. ================================================================================== Red Hat Marketplace Operator successfully installed. It may take a few minutes for your cluster to show up in the Marketplace console so you can install purchased software or trials. Would you like to go back to the Red Hat Marketplace now? [ Y/n ] n rojanjose@cloudshell:~$ Verify the operator install correctly in the Installed operators page in OpenShift console. The operator is installed in the project openshift-redhat-marketplace and the status column should show Succeeded . Check the pods are up and running. $ oc get pods -n openshift-redhat-marketplace NAME READY STATUS RESTARTS AGE prometheus-operator-77dd76b6c7-jnvdr 2 /2 Running 0 9m48s prometheus-rhm-marketplaceconfig-meterbase-0 5 /5 Running 1 9m27s prometheus-rhm-marketplaceconfig-meterbase-1 5 /5 Running 1 9m27s redhat-marketplace-operator-747f7c67bd-dfbwd 1 /1 Running 0 9m37s rhm-metric-state-57c8666b5b-rsgbs 3 /3 Running 0 9m47s rhm-remoteresources3-controller-5b5558b786-c2g4q 1 /1 Running 0 9m37s rhm-watch-keeper-cdfdcb68f-gwdzs 1 /1 Running 1 9m36s","title":"Step 1.4 - Install the Marketplace operator"},{"location":"modules/marketplace/rhm-cluster-setup/#step-15-reload-worker-nodes","text":"Go to the cluster details page in the IBM Cloud console, select the Worker nodes page. Select all workers and click the Reload button.","title":"Step 1.5 - Reload worker nodes"},{"location":"modules/marketplace/rhm-cluster-setup/#step-2-add-aws-cluster","text":"Repeat the steps followed to add the ROKS cluster in order to add the second cluster running on AWS.","title":"Step 2: Add AWS cluster"},{"location":"modules/marketplace/rhm-cluster-setup/#step-21-install-marketplace-operator","text":"Log into the AWS OpenShift console using the credenitals provided by the instructor. Copy the login command and run it from the CLI terminal using the credentials rojanjose@cloudshell:~$ oc login --token = maUOkoKQ5LAAlyPpNOhBxZSGezl1-4cdBCwloKH4qh8w --server = https://api.dev-advocate.rhm-awsocp.com:6443 The server uses a certificate signed by an unknown authority. You can bypass the certificate check, but any data you send to the server could be intercepted by others. Use insecure connections? ( y/n ) : y Logged into \"https://api.dev-advocate.rhm-awsocp.com:6443\" as \"kube:admin\" using the token provided. You have access to 69 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"default\" . Run the Marketplace install script copied from the earlier step. Give cluster the name rhm-jumpstart-aws when prompted during the install process. Expected output: rojanjose@cloudshell:~$ curl -sL https://marketplace.redhat.com/provisioning/v1/scripts/install-operator | bash -s -- -i 5e9ccb95a85d690013d1b9e0 -p eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQ k0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk2N5M4MTUsZmp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6KTArXLnQ -a Automatic true ================================================================================== [ INFO ] Installing Red Hat Marketplace Operator... ================================================================================== /dev/stdin: line 146 : uuidgen: command not found > Cluster Name: Edit cluster name for easy reference in Red Hat Marketplace? [ Y/n ] y Enter Cluster Name: rhm-jumpstart-aws Detected the following options: > Account Id: 5e9ccb95a85d690013d1b9e0 > Cluster Name: rhm-jumpstart-ibmcloud > Pull Secret: eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTk3NjM4MTUsImp0aSI6ImY3N2U3NmJmNmVhNDQ3M2M4YTkyMWMwZjljMzUyZTgzIn0.G6hAt9g8K6F7H03qvxCzCZ17sjlcmF8tdo6 KTArXLnQ > Marketplace Operator Approval Strategy: Automatic Continue with installation? [ Y/n ] : Continue with installation? [ Y/n ] : y STEP 1 /5: Validating Namespace Installing Red Hat Marketplace Operator ..... ...... Verify the operator installed correctly under the project openshift-redhat-marketplace and the status column should show a value of Succeeded . Check the pods are up and running. $ oc get pods -n openshift-redhat-marketplace NAME READY STATUS RESTARTS AGE prometheus-operator-586c8b7696-2w8kc 2 /2 Running 0 6h34m prometheus-rhm-marketplaceconfig-meterbase-0 5 /5 Running 1 15d prometheus-rhm-marketplaceconfig-meterbase-1 5 /5 Running 0 15d redhat-marketplace-operator-7c455fcf6c-p56q6 1 /1 Running 0 15d rhm-metric-state-5fbb6d95ff-hdsjk 3 /3 Running 0 15d rhm-remoteresources3-controller-5cc6b4945b-lpc2v 1 /1 Running 0 15d rhm-watch-keeper-5ddb67c5d7-ff8mk 1 /1 Running 1 15d","title":"Step 2.1 - Install Marketplace Operator"},{"location":"modules/marketplace/rhm-cluster-setup/#step-3-validate-clusters-visiblity","text":"All users registered with the organization account should now check the clusters page and ensure that both IBM and AWS clusters are visibile.","title":"Step 3: Validate clusters visiblity"},{"location":"modules/marketplace/rhm-cluster-setup/#additional-resources","text":"","title":"Additional resources"},{"location":"modules/marketplace/rhm-cluster-setup/#using-marketplace-with-crc","text":"Follow this article to setup Marketplace on your local machine.","title":"Using Marketplace with CRC"},{"location":"modules/marketplace/rhm-introduction/","text":"Introduction to Red Hat Marketplace \u00b6 Red Hat Marketplace offers a unified experience to purchase containerized software for your hybrid cloud environment. The marketplace offers a comprehensive catalog backed by leading cloud vendors, ability to deploy that software across all clouds using the Red Hat OpenShift Container Platform, monitor software spend, and track license usage and expirations. What is Red Hat Marketplace \u00b6 Watch this video to learn about Red Hat Marketplace. Slides Capabilities \u00b6 Automated deployments. Single-dashboard visibility across clouds. Three tier responsive support Streamlined billing and contracting Simplified governance Marketplace Select OpenShift & The Operator Framework \u00b6 With automated deployment, software is immediately available to deploy on any Red Hat OpenShift cluster, providing a fast, integrated experience. The Marketplace uses the Operator Framework, an open source toolkit to manage Kubernetes native applications, offering the complete software life cycle management capabilties. Onboarding & Software trials \u00b6 This workshop steps you through the process of onboarding an organization into Marketplace. Using the free trial option, we will do hands-on labs with the software available in the catalog.","title":"Red Hat Marketplace"},{"location":"modules/marketplace/rhm-introduction/#introduction-to-red-hat-marketplace","text":"Red Hat Marketplace offers a unified experience to purchase containerized software for your hybrid cloud environment. The marketplace offers a comprehensive catalog backed by leading cloud vendors, ability to deploy that software across all clouds using the Red Hat OpenShift Container Platform, monitor software spend, and track license usage and expirations.","title":"Introduction to Red Hat Marketplace"},{"location":"modules/marketplace/rhm-introduction/#what-is-red-hat-marketplace","text":"Watch this video to learn about Red Hat Marketplace. Slides","title":"What is Red Hat Marketplace"},{"location":"modules/marketplace/rhm-introduction/#capabilities","text":"Automated deployments. Single-dashboard visibility across clouds. Three tier responsive support Streamlined billing and contracting Simplified governance Marketplace Select","title":"Capabilities"},{"location":"modules/marketplace/rhm-introduction/#openshift-the-operator-framework","text":"With automated deployment, software is immediately available to deploy on any Red Hat OpenShift cluster, providing a fast, integrated experience. The Marketplace uses the Operator Framework, an open source toolkit to manage Kubernetes native applications, offering the complete software life cycle management capabilties.","title":"OpenShift &amp; The Operator Framework"},{"location":"modules/marketplace/rhm-introduction/#onboarding-software-trials","text":"This workshop steps you through the process of onboarding an organization into Marketplace. Using the free trial option, we will do hands-on labs with the software available in the catalog.","title":"Onboarding &amp; Software trials"},{"location":"modules/marketplace/rhm-onboarding/","text":"Marketplace Onboarding \u00b6 The onboarding of an organization comprises of the following steps: Account setup \u00b6 Identify the personas. Create the user accounts. Setup the organization account. Invite other users into the organization's account. Cluster setup \u00b6 Cluster admin adds clusters to the organization's account. See how clusters running in a hybrid cloud environment can be linked to the organization's account. Software Trials \u00b6 Select software for trials. Deploy the select software into OpenShift clusters and try them with sample applications.","title":"About"},{"location":"modules/marketplace/rhm-onboarding/#marketplace-onboarding","text":"The onboarding of an organization comprises of the following steps:","title":"Marketplace Onboarding"},{"location":"modules/marketplace/rhm-onboarding/#account-setup","text":"Identify the personas. Create the user accounts. Setup the organization account. Invite other users into the organization's account.","title":"Account setup"},{"location":"modules/marketplace/rhm-onboarding/#cluster-setup","text":"Cluster admin adds clusters to the organization's account. See how clusters running in a hybrid cloud environment can be linked to the organization's account.","title":"Cluster setup"},{"location":"modules/marketplace/rhm-onboarding/#software-trials","text":"Select software for trials. Deploy the select software into OpenShift clusters and try them with sample applications.","title":"Software Trials"},{"location":"modules/marketplace/rhm-software-trial/","text":"Software trial \u00b6 Let's get trial subscription for few software that we will later use in the later part of the workshop. Trials for the Jumpstart Workshop \u00b6 CockroachDB : Deploy CockroachDB from the Red Hat Marketpalce portal to the AWS cluster. MongoDB : Discover the software from OpenShift OperatorHub catalog, procure a trial subscription from the Red Hat Marketplace and then use CLI commands to install the software. CodeReady Workspaces : Install CodeReady Workspaces to setup the development environment. OpenShift Pipelines : Install OpenShift piplines for the CI/CD exercises. Complete list of Software trials \u00b6 Database CockroachDB MongoDB PostgreSQL AI/ML Cortex Certifai EDDI Dev Tools Red Hat Runtimes Joget Workflow","title":"About"},{"location":"modules/marketplace/rhm-software-trial/#software-trial","text":"Let's get trial subscription for few software that we will later use in the later part of the workshop.","title":"Software trial"},{"location":"modules/marketplace/rhm-software-trial/#trials-for-the-jumpstart-workshop","text":"CockroachDB : Deploy CockroachDB from the Red Hat Marketpalce portal to the AWS cluster. MongoDB : Discover the software from OpenShift OperatorHub catalog, procure a trial subscription from the Red Hat Marketplace and then use CLI commands to install the software. CodeReady Workspaces : Install CodeReady Workspaces to setup the development environment. OpenShift Pipelines : Install OpenShift piplines for the CI/CD exercises.","title":"Trials for the Jumpstart Workshop"},{"location":"modules/marketplace/rhm-software-trial/#complete-list-of-software-trials","text":"Database CockroachDB MongoDB PostgreSQL AI/ML Cortex Certifai EDDI Dev Tools Red Hat Runtimes Joget Workflow","title":"Complete list of Software trials"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/","text":"Trying CockroachDB \u00b6 Prerequistites \u00b6 Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-cockroachdb Try software \u00b6 Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for CockroachDB . Select the CockraochDB tile. The CockraochDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Operator install \u00b6 Select the CockraochDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as cockroachdb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project cockroachdb-test . Create Database \u00b6 From the installed Operators page for CockroachDB, click on the link CockroachDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] CockroachDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1/1 Running 0 46m example-cockroachdb-0 1/1 Running 0 36m example-cockroachdb-1 1/1 Running 0 36m example-cockroachdb-2 1/1 Running 0 36m example-cockroachdb-init-l5m56 0/1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a CockroachDB client. kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test $ kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test If you don't see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted Access Database \u00b6 Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-cockroachdb-0 8080 $ kubectl port-forward example-cockroachdb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-cockroachdb-public.cockroachdb-test.svc.cluster.local Conclusion \u00b6 The CockroachDB instance is now ready for use.","title":"Trying CockroachDB"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#trying-cockroachdb","text":"","title":"Trying CockroachDB"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#prerequistites","text":"Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-cockroachdb","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#try-software","text":"Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for CockroachDB . Select the CockraochDB tile. The CockraochDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software.","title":"Try software"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#operator-install","text":"Select the CockraochDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as cockroachdb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project cockroachdb-test .","title":"Operator install"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#create-database","text":"From the installed Operators page for CockroachDB, click on the link CockroachDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] CockroachDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1/1 Running 0 46m example-cockroachdb-0 1/1 Running 0 36m example-cockroachdb-1 1/1 Running 0 36m example-cockroachdb-2 1/1 Running 0 36m example-cockroachdb-init-l5m56 0/1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a CockroachDB client. kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test $ kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test If you don't see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted","title":"Create Database"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#access-database","text":"Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-cockroachdb-0 8080 $ kubectl port-forward example-cockroachdb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-cockroachdb-public.cockroachdb-test.svc.cluster.local","title":"Access Database"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial-singletenant/#conclusion","text":"The CockroachDB instance is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/","text":"Trying CockroachDB \u00b6 Prerequistites \u00b6 Log into the cluster from the IBM Cloud shell as the cluster admin. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project cockroachdb-trial Try software \u00b6 Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for CockroachDB . Select the CockraochDB tile. The CockraochDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Operator install \u00b6 Select the CockraochDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as cockroachdb-trial for the operator and click Install . In the list of installed cluster operators, a new row appears with the status Installing . Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project cockroachdb-test . Create Database \u00b6 From the installed Operators page for CockroachDB, click on the link CockroachDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] CockroachDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1/1 Running 0 46m example-cockroachdb-0 1/1 Running 0 36m example-cockroachdb-1 1/1 Running 0 36m example-cockroachdb-2 1/1 Running 0 36m example-cockroachdb-init-l5m56 0/1 Completed 0 36m Optional steps \u00b6 Now, let's create a user and a database. We will use the following to command to spin up a CockroachDB client. kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test $ kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test If you don't see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted Access Database \u00b6 Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-cockroachdb-0 8080 $ kubectl port-forward example-cockroachdb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-cockroachdb-public.cockroachdb-test.svc.cluster.local Conclusion \u00b6 The CockroachDB instance is now ready for use.","title":"CockroachDB"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#trying-cockroachdb","text":"","title":"Trying CockroachDB"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#prerequistites","text":"Log into the cluster from the IBM Cloud shell as the cluster admin. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project cockroachdb-trial","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#try-software","text":"Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for CockroachDB . Select the CockraochDB tile. The CockraochDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software.","title":"Try software"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#operator-install","text":"Select the CockraochDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as cockroachdb-trial for the operator and click Install . In the list of installed cluster operators, a new row appears with the status Installing . Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project cockroachdb-test .","title":"Operator install"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#create-database","text":"From the installed Operators page for CockroachDB, click on the link CockroachDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] CockroachDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project cockroachdb-test Now using project \"cockroachdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE cockroachdb-7486949c78-kdvcm 1/1 Running 0 46m example-cockroachdb-0 1/1 Running 0 36m example-cockroachdb-1 1/1 Running 0 36m example-cockroachdb-2 1/1 Running 0 36m example-cockroachdb-init-l5m56 0/1 Completed 0 36m","title":"Create Database"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#optional-steps","text":"Now, let's create a user and a database. We will use the following to command to spin up a CockroachDB client. kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test $ kubectl run -it --rm cockroach-client \\ --image=cockroachdb/cockroach \\ --restart=Never \\ --command -- \\ ./cockroach sql --insecure --host=example-cockroachdb-public.cockroachdb-test If you don't see a command prompt, try pressing enter. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-cockroachdb-public.cockroachdb-test:26257/defaultdb> \\q pod \"cockroach-client\" deleted","title":"Optional steps"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#access-database","text":"Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-cockroachdb-0 8080 $ kubectl port-forward example-cockroachdb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-cockroachdb-public.cockroachdb-test.svc.cluster.local","title":"Access Database"},{"location":"modules/marketplace/trials/rhm-cockroachdb-trial/#conclusion","text":"The CockroachDB instance is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-cortexcertifai-trial/","text":"Trying Cortex Certifai \u00b6 Prerequistites \u00b6 Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-cortex-certifai Try software \u00b6 Operator install \u00b6 The marketplace offers a wide variety of products across twelve categories. Let's see how a developer can try Cortex Certifai. Create a project cortex-certifai-test in your CodeReady Containers cluster. Go to the Marketplace catalog and search for Cortex Certifai. Select the tile and click on Free trial to start your 30 days trial. Go to Workspace > My Software and click on the Install operator icon. Select the CodeReady Containers cluster from the list of Target clusters and then pick the Namespace Scope where the operator should get installed. Login to the cluster to verify the operator installed successfully. Proceed to the Cortex Certifai Operator tab to install operands or instances for the Cortex Certifai operator. The operators can be installed directly from the cluster. The Red Hat Marketplace operators become available in the Operator Hub catalog after the Marketplace operator is installed. To install a product directly from the CodeReady Containers, login to the cluster, go to Operators > OperatorHub , search and install. Note: Marketplace should appear as a filter parameter under Product type in the OpertorHub search options. Uninstalling an Operator \u00b6 Uninstall the Cortex Certifai operator by selecting the Uninstall Operator . The operator for the cluster will automatically delist from the Marketplace product operators page.","title":"Cortex Certifai"},{"location":"modules/marketplace/trials/rhm-cortexcertifai-trial/#trying-cortex-certifai","text":"","title":"Trying Cortex Certifai"},{"location":"modules/marketplace/trials/rhm-cortexcertifai-trial/#prerequistites","text":"Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-cortex-certifai","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-cortexcertifai-trial/#try-software","text":"","title":"Try software"},{"location":"modules/marketplace/trials/rhm-cortexcertifai-trial/#operator-install","text":"The marketplace offers a wide variety of products across twelve categories. Let's see how a developer can try Cortex Certifai. Create a project cortex-certifai-test in your CodeReady Containers cluster. Go to the Marketplace catalog and search for Cortex Certifai. Select the tile and click on Free trial to start your 30 days trial. Go to Workspace > My Software and click on the Install operator icon. Select the CodeReady Containers cluster from the list of Target clusters and then pick the Namespace Scope where the operator should get installed. Login to the cluster to verify the operator installed successfully. Proceed to the Cortex Certifai Operator tab to install operands or instances for the Cortex Certifai operator. The operators can be installed directly from the cluster. The Red Hat Marketplace operators become available in the Operator Hub catalog after the Marketplace operator is installed. To install a product directly from the CodeReady Containers, login to the cluster, go to Operators > OperatorHub , search and install. Note: Marketplace should appear as a filter parameter under Product type in the OpertorHub search options.","title":"Operator install"},{"location":"modules/marketplace/trials/rhm-cortexcertifai-trial/#uninstalling-an-operator","text":"Uninstall the Cortex Certifai operator by selecting the Uninstall Operator . The operator for the cluster will automatically delist from the Marketplace product operators page.","title":"Uninstalling an Operator"},{"location":"modules/marketplace/trials/rhm-eddi-trial/","text":"Trying E.D.D.I \u00b6 Prerequistites \u00b6 Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-eddi Try software \u00b6 Installing products using CLI commands \u00b6 This section covers the steps to install E.D.D.I chatbot operator using CLI commands. The general instructions to install an operator is available here . Prior to using CLI install, ensure the entitlement for the software exists in the Red Hat Marketplace. Disclaimer: The operators installed using the CLI will not show up in the list of installed opertroars in Red Hat Marketplace. Get the list of Red Hat Marketplace Operators: oc get packagemanifests -n openshift-marketplace | grep Marketplace Find the package name for E.D.D.I Operator oc get packagemanifests -n openshift-marketplace | grep eddi eddi-operator-certified Certified Operators 16d eddi-operator-certified-rhmp Red Hat Marketplace 16d Describe the package eddi-operator-certified-rhmp : oc describe packagemanifests eddi-operator-certified-rhmp -n openshift-marketplace Use the commands above to gather the information required to generate the Operator group and Operator subscription yaml files. Operator group (eddioperatorgroup.yaml): apiVersion : operators.coreos.com/v1 kind : OperatorGroup metadata : name : eddi-og-redhat-marketplace namespace : eddi-trial spec : targetNamespaces : - eddi-trial Operator subscritpion (eddisub.yaml): apiVersion : operators.coreos.com/v1alpha1 kind : Subscription metadata : name : eddi-operator-certified-rhmp namespace : eddi-trial spec : channel : alpha name : eddi-operator-certified-rhmp source : redhat-marketplace sourceNamespace : openshift-marketplace Install the EDDI Operator: oc apply -f eddioperatorgroup.yaml operatorgroup.operators.coreos.com/eddi-og-redhat-marketplace unchanged $ oc apply -f eddisub.yaml subscription.operators.coreos.com/eddi-operator-certified-rhmp created Ensure the subscription installed properly by running the command: oc describe sub eddi-operator-certified-rhmp -n eddi-trial | grep -A5 Conditions Conditions: Last Transition Time: 2020 -06-13T02:36:36Z Message: all available catalogsources are healthy Reason: AllCatalogSourcesHealthy Status: False Type: CatalogSourcesUnhealthy Troubleshooting \u00b6 Commands to troubleshoot CodeReady Containers can be found here The error below indicates the necessary entitlement does not exist for the product in Red Hat Marketplace: Failed to pull image \"registry.marketplace.redhat.com/rhm/labsai/eddi-operator@sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75\" : rpc error: code = Unknown desc = Error reading manifest sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75 in registry.marketplace.redhat.com/rhm/labsai/eddi-operator: errors: denied: requested access to the resource is denied unauthorized: authentication required Conclusion \u00b6 The E.D.D.I instance is now ready for use.","title":"EDDI"},{"location":"modules/marketplace/trials/rhm-eddi-trial/#trying-eddi","text":"","title":"Trying E.D.D.I"},{"location":"modules/marketplace/trials/rhm-eddi-trial/#prerequistites","text":"Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-eddi","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-eddi-trial/#try-software","text":"","title":"Try software"},{"location":"modules/marketplace/trials/rhm-eddi-trial/#installing-products-using-cli-commands","text":"This section covers the steps to install E.D.D.I chatbot operator using CLI commands. The general instructions to install an operator is available here . Prior to using CLI install, ensure the entitlement for the software exists in the Red Hat Marketplace. Disclaimer: The operators installed using the CLI will not show up in the list of installed opertroars in Red Hat Marketplace. Get the list of Red Hat Marketplace Operators: oc get packagemanifests -n openshift-marketplace | grep Marketplace Find the package name for E.D.D.I Operator oc get packagemanifests -n openshift-marketplace | grep eddi eddi-operator-certified Certified Operators 16d eddi-operator-certified-rhmp Red Hat Marketplace 16d Describe the package eddi-operator-certified-rhmp : oc describe packagemanifests eddi-operator-certified-rhmp -n openshift-marketplace Use the commands above to gather the information required to generate the Operator group and Operator subscription yaml files. Operator group (eddioperatorgroup.yaml): apiVersion : operators.coreos.com/v1 kind : OperatorGroup metadata : name : eddi-og-redhat-marketplace namespace : eddi-trial spec : targetNamespaces : - eddi-trial Operator subscritpion (eddisub.yaml): apiVersion : operators.coreos.com/v1alpha1 kind : Subscription metadata : name : eddi-operator-certified-rhmp namespace : eddi-trial spec : channel : alpha name : eddi-operator-certified-rhmp source : redhat-marketplace sourceNamespace : openshift-marketplace Install the EDDI Operator: oc apply -f eddioperatorgroup.yaml operatorgroup.operators.coreos.com/eddi-og-redhat-marketplace unchanged $ oc apply -f eddisub.yaml subscription.operators.coreos.com/eddi-operator-certified-rhmp created Ensure the subscription installed properly by running the command: oc describe sub eddi-operator-certified-rhmp -n eddi-trial | grep -A5 Conditions Conditions: Last Transition Time: 2020 -06-13T02:36:36Z Message: all available catalogsources are healthy Reason: AllCatalogSourcesHealthy Status: False Type: CatalogSourcesUnhealthy","title":"Installing products using CLI commands"},{"location":"modules/marketplace/trials/rhm-eddi-trial/#troubleshooting","text":"Commands to troubleshoot CodeReady Containers can be found here The error below indicates the necessary entitlement does not exist for the product in Red Hat Marketplace: Failed to pull image \"registry.marketplace.redhat.com/rhm/labsai/eddi-operator@sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75\" : rpc error: code = Unknown desc = Error reading manifest sha256:19ac4278f510422428b12c04aba572101e153e0804edaaeabc6600782ab38f75 in registry.marketplace.redhat.com/rhm/labsai/eddi-operator: errors: denied: requested access to the resource is denied unauthorized: authentication required","title":"Troubleshooting"},{"location":"modules/marketplace/trials/rhm-eddi-trial/#conclusion","text":"The E.D.D.I instance is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/","text":"Trying MongoDB \u00b6 Prerequistites \u00b6 Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-mongodb Try software \u00b6 Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for MongoDB . Select the MongoDB tile. The MongoDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Operator install \u00b6 Select the MongoDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as mongodbdb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project mongodbdb-test . Create Database \u00b6 From the installed Operators page for MongoDB, click on the link MongoDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] MongoDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project mongodbdb-test Now using project \"mongodbdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\" . $ kubectl get pods NAME READY STATUS RESTARTS AGE mongodbdb-7486949c78-kdvcm 1 /1 Running 0 46m example-mongodbdb-0 1 /1 Running 0 36m example-mongodbdb-1 1 /1 Running 0 36m example-mongodbdb-2 1 /1 Running 0 36m example-mongodbdb-init-l5m56 0 /1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a MongoDB client. kubectl run -it --rm mongodb-client \\ --image = mongodbdb/mongodb \\ --restart = Never \\ --command -- \\ ./mongodb sql --insecure --host = example-mongodbdb-public.mongodbdb-test $ kubectl run -it --rm mongodb-client \\ --image = mongodbdb/mongodb \\ --restart = Never \\ --command -- \\ ./mongodb sql --insecure --host = example-mongodbdb-public.mongodbdb-test Access Database \u00b6 Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost with port forwarding. kubectl port-forward example-mongodbdb-0 8080 For example ... $ kubectl port-forward example-mongodbdb-0 8080 Forwarding from [ ::1 ] :8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:mongodb://127.0.0.1:26257/bank?sslmode=disable example-mongodbdb-public.mongodbdb-test.svc.cluster.local Conclusion \u00b6 The MongoDB instance is now ready for use.","title":"Trying MongoDB"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#trying-mongodb","text":"","title":"Trying MongoDB"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#prerequistites","text":"Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-mongodb","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#try-software","text":"Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for MongoDB . Select the MongoDB tile. The MongoDB product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software.","title":"Try software"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#operator-install","text":"Select the MongoDB tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as mongodbdb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project mongodbdb-test .","title":"Operator install"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#create-database","text":"From the installed Operators page for MongoDB, click on the link MongoDB under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] MongoDB pods should come up when the database install completes. Run the following commands to check the status. $ oc project mongodbdb-test Now using project \"mongodbdb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\" . $ kubectl get pods NAME READY STATUS RESTARTS AGE mongodbdb-7486949c78-kdvcm 1 /1 Running 0 46m example-mongodbdb-0 1 /1 Running 0 36m example-mongodbdb-1 1 /1 Running 0 36m example-mongodbdb-2 1 /1 Running 0 36m example-mongodbdb-init-l5m56 0 /1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a MongoDB client. kubectl run -it --rm mongodb-client \\ --image = mongodbdb/mongodb \\ --restart = Never \\ --command -- \\ ./mongodb sql --insecure --host = example-mongodbdb-public.mongodbdb-test $ kubectl run -it --rm mongodb-client \\ --image = mongodbdb/mongodb \\ --restart = Never \\ --command -- \\ ./mongodb sql --insecure --host = example-mongodbdb-public.mongodbdb-test","title":"Create Database"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#access-database","text":"Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost with port forwarding. kubectl port-forward example-mongodbdb-0 8080 For example ... $ kubectl port-forward example-mongodbdb-0 8080 Forwarding from [ ::1 ] :8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:mongodb://127.0.0.1:26257/bank?sslmode=disable example-mongodbdb-public.mongodbdb-test.svc.cluster.local","title":"Access Database"},{"location":"modules/marketplace/trials/rhm-mongodb-trial-singletenant/#conclusion","text":"The MongoDB instance is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/","text":"Trying MongoDB \u00b6 Let's see how the Free Trial option works for a NoSQL database operator. Step 1 - Start free trial \u00b6 For this trail, we will use the OperatorHub path. Go to the OperatorHub page in the OpenShift cluster and search for MongoDB . In the Provider Type , select Marketplace . Click the tile to open the install page. Click on the blue Purchase button. This redirects the user to the Marketplace product purchase page. Select the button that says Begin free trial . Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Step 2 - Operator install \u00b6 Open the IBM Cloud shell. Ensure you are logged into the OpenShift cluster with admin access. Run the script as shown below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOperator.sh ) Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOperator.sh ) Creating project for MongoDB install Now using project \"mongodb-trial\" on server \"https://c107-e.us-south.containers.cloud.ibm.com:31301\" . You can add applications to this project with the 'new-app' command. For example, try: oc new-app django-psql-example to build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application: kubectl create deployment hello-node --image = gcr.io/hello-minikube-zero-install/hello-node Creating Operator group... operatorgroup.operators.coreos.com/mongodb-trial-og-rehat-marketplace created Creating subscription... subscription.operators.coreos.com/mongodb-enterprise-advanced-ibm-rhmp created Mongodb install initiated. Run the commands below to ensure the status shows 'all available catalogsources are healthy' . $ oc describe sub mongodb-enterprise-advanced-ibm-rhmp -n mongodb-trial | grep -A5 Conditions Conditions: Last Transition Time: 2020 -09-14T16:57:23Z Message: all available catalogsources are healthy Reason: AllCatalogSourcesHealthy Status: False Type: CatalogSourcesUnhealthy This script did the follwing: Create a project called mongodb-trial . Create an Operator group. Create an Operator subscription. Verify this in the cluster Installed Operators page. The pods list should show the operator pod runing rojan@cloudshell:~$ oc get pods NAME READY STATUS RESTARTS AGE mongodb-enterprise-operator-7dd689c784-6skk2 1 /1 Running 0 33m Step 3 - Deploy OpsManager \u00b6 In the IBM Cloud shell, run the script as shown below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOperator.sh ) Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOpsManager.sh ) Creating secret ops-manager-admin ... secret/ops-manager-admin created Creating an instance based on CRD MongoDBOpsManager mongodbopsmanager.mongodb.com/ops-manager created Creating an instance based on CRD MongoDBOpsManager Check the status of deploy with this command: oc describe om ops-manager | grep -A5 Status Status: Application Database: Last Transition: 2020 -09-14T17:55:18Z Message: StatefulSet not ready Phase: Reconciling Resources Not Ready: This script does the follwing: Create a configmap. Create a MongoDB OpsManager deployment. Wait for all the pods to come up. The describe command should finally show the status as running. rojan@cloudshell:~$ oc describe om ops-manager | grep -A5 Status Status: Application Database: Last Transition: 2020 -09-14T18:14:24Z Members: 3 Phase: Running Type: ReplicaSet The pods should now list ops-manager pods with the status Running . rojan@cloudshell:~$ oc get pods NAME READY STATUS RESTARTS AGE mongodb-enterprise-operator-7dd689c784-6skk2 1 /1 Running 0 82m ops-manager-0 1 /1 Running 0 19m ops-manager-backup-daemon-0 1 /1 Running 0 8m10s ops-manager-db-0 1 /1 Running 0 9m2s ops-manager-db-1 1 /1 Running 0 10m ops-manager-db-2 1 /1 Running 0 10m Run this command and verify the URL points to http://ops-manager-svc.mongodb-trial.svc.cluster.local:8080 This value is later used in the MongoDB install script. oc describe om ops-manager | grep URL | awk '{print $2}' rojan@cloudshell:~$ oc describe om ops-manager | grep URL | awk '{print $2}' http://ops-manager-svc.mongodb-trial.svc.cluster.local:8080 Step 4 - Deploy MongoDB \u00b6 In the IBM Cloud shell, run the script as shown below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodb.sh ) Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodb.sh ) Creating a config map configmap/mongodb-cm created Creating a config map mongodb.mongodb.com/rhm-mongodb-replica-set created Name: rhm-mongodb-replica-set Namespace: mongodb-trial Labels: <none> Annotations: kubectl.kubernetes.io/last-applied-configuration: { \"apiVersion\" : \"mongodb.com/v1\" , \"kind\" : \"MongoDB\" , \"metadata\" : { \"annotations\" : {} , \"name\" : \"rhm-mongodb-replica-set\" , \"namespace\" : \"mongodb-trial\" } ... API Version: mongodb.com/v1 Kind: MongoDB Metadata: Creation Timestamp: 2020 -09-14T18:49:48Z Generation: 1 Resource Version: 1076032 Self Link: /apis/mongodb.com/v1/namespaces/mongodb-trial/mongodb/rhm-mongodb-replica-set UID: 833e8c1a-5e62-4fa9-9cee-3cccf1d66bad Spec: Credentials: ops-manager-admin-key Members: 3 Ops Manager: Config Map Ref: Name: mongodb-cm Type: ReplicaSet Version: 4 .2.2 Events: <none> This script does the follwing: Create a configmap. Create a MongoDB deployment. The pods should now list mongodb-operator- , ops-manager- and mongob-replica- pods with the status Running . rojan@cloudshell:~$ oc get pods NAME READY STATUS RESTARTS AGE mongodb-enterprise-operator-7dd689c784-6skk2 1 /1 Running 0 118m ops-manager-0 1 /1 Running 0 54m ops-manager-backup-daemon-0 1 /1 Running 0 43m ops-manager-db-0 1 /1 Running 0 44m ops-manager-db-1 1 /1 Running 0 45m ops-manager-db-2 1 /1 Running 0 46m rhm-mongodb-replica-set-0 1 /1 Running 0 5m50s rhm-mongodb-replica-set-1 1 /1 Running 0 4m rhm-mongodb-replica-set-2 1 /1 Running 0 2m20s Conclusion \u00b6 MongoDB is now avialble locally in the cluster at the endpoint: mongodb://rhm-mongodb-replica-set-svc.mongodb-trial.svc.cluster.local:27017 This MongoDB server instance is now ready for use. Other references \u00b6 MongoDB installation guide.","title":"MongoDB"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#trying-mongodb","text":"Let's see how the Free Trial option works for a NoSQL database operator.","title":"Trying MongoDB"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#step-1-start-free-trial","text":"For this trail, we will use the OperatorHub path. Go to the OperatorHub page in the OpenShift cluster and search for MongoDB . In the Provider Type , select Marketplace . Click the tile to open the install page. Click on the blue Purchase button. This redirects the user to the Marketplace product purchase page. Select the button that says Begin free trial . Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software.","title":"Step 1 - Start free trial"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#step-2-operator-install","text":"Open the IBM Cloud shell. Ensure you are logged into the OpenShift cluster with admin access. Run the script as shown below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOperator.sh ) Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOperator.sh ) Creating project for MongoDB install Now using project \"mongodb-trial\" on server \"https://c107-e.us-south.containers.cloud.ibm.com:31301\" . You can add applications to this project with the 'new-app' command. For example, try: oc new-app django-psql-example to build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application: kubectl create deployment hello-node --image = gcr.io/hello-minikube-zero-install/hello-node Creating Operator group... operatorgroup.operators.coreos.com/mongodb-trial-og-rehat-marketplace created Creating subscription... subscription.operators.coreos.com/mongodb-enterprise-advanced-ibm-rhmp created Mongodb install initiated. Run the commands below to ensure the status shows 'all available catalogsources are healthy' . $ oc describe sub mongodb-enterprise-advanced-ibm-rhmp -n mongodb-trial | grep -A5 Conditions Conditions: Last Transition Time: 2020 -09-14T16:57:23Z Message: all available catalogsources are healthy Reason: AllCatalogSourcesHealthy Status: False Type: CatalogSourcesUnhealthy This script did the follwing: Create a project called mongodb-trial . Create an Operator group. Create an Operator subscription. Verify this in the cluster Installed Operators page. The pods list should show the operator pod runing rojan@cloudshell:~$ oc get pods NAME READY STATUS RESTARTS AGE mongodb-enterprise-operator-7dd689c784-6skk2 1 /1 Running 0 33m","title":"Step 2 - Operator install"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#step-3-deploy-opsmanager","text":"In the IBM Cloud shell, run the script as shown below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOperator.sh ) Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodbOpsManager.sh ) Creating secret ops-manager-admin ... secret/ops-manager-admin created Creating an instance based on CRD MongoDBOpsManager mongodbopsmanager.mongodb.com/ops-manager created Creating an instance based on CRD MongoDBOpsManager Check the status of deploy with this command: oc describe om ops-manager | grep -A5 Status Status: Application Database: Last Transition: 2020 -09-14T17:55:18Z Message: StatefulSet not ready Phase: Reconciling Resources Not Ready: This script does the follwing: Create a configmap. Create a MongoDB OpsManager deployment. Wait for all the pods to come up. The describe command should finally show the status as running. rojan@cloudshell:~$ oc describe om ops-manager | grep -A5 Status Status: Application Database: Last Transition: 2020 -09-14T18:14:24Z Members: 3 Phase: Running Type: ReplicaSet The pods should now list ops-manager pods with the status Running . rojan@cloudshell:~$ oc get pods NAME READY STATUS RESTARTS AGE mongodb-enterprise-operator-7dd689c784-6skk2 1 /1 Running 0 82m ops-manager-0 1 /1 Running 0 19m ops-manager-backup-daemon-0 1 /1 Running 0 8m10s ops-manager-db-0 1 /1 Running 0 9m2s ops-manager-db-1 1 /1 Running 0 10m ops-manager-db-2 1 /1 Running 0 10m Run this command and verify the URL points to http://ops-manager-svc.mongodb-trial.svc.cluster.local:8080 This value is later used in the MongoDB install script. oc describe om ops-manager | grep URL | awk '{print $2}' rojan@cloudshell:~$ oc describe om ops-manager | grep URL | awk '{print $2}' http://ops-manager-svc.mongodb-trial.svc.cluster.local:8080","title":"Step 3 - Deploy OpsManager"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#step-4-deploy-mongodb","text":"In the IBM Cloud shell, run the script as shown below: source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodb.sh ) Expected output: rojan@cloudshell:~$ source < ( curl -s https://raw.githubusercontent.com/IBM/red-hat-marketplace/master/workshop/scripts/mongodb/installMongodb.sh ) Creating a config map configmap/mongodb-cm created Creating a config map mongodb.mongodb.com/rhm-mongodb-replica-set created Name: rhm-mongodb-replica-set Namespace: mongodb-trial Labels: <none> Annotations: kubectl.kubernetes.io/last-applied-configuration: { \"apiVersion\" : \"mongodb.com/v1\" , \"kind\" : \"MongoDB\" , \"metadata\" : { \"annotations\" : {} , \"name\" : \"rhm-mongodb-replica-set\" , \"namespace\" : \"mongodb-trial\" } ... API Version: mongodb.com/v1 Kind: MongoDB Metadata: Creation Timestamp: 2020 -09-14T18:49:48Z Generation: 1 Resource Version: 1076032 Self Link: /apis/mongodb.com/v1/namespaces/mongodb-trial/mongodb/rhm-mongodb-replica-set UID: 833e8c1a-5e62-4fa9-9cee-3cccf1d66bad Spec: Credentials: ops-manager-admin-key Members: 3 Ops Manager: Config Map Ref: Name: mongodb-cm Type: ReplicaSet Version: 4 .2.2 Events: <none> This script does the follwing: Create a configmap. Create a MongoDB deployment. The pods should now list mongodb-operator- , ops-manager- and mongob-replica- pods with the status Running . rojan@cloudshell:~$ oc get pods NAME READY STATUS RESTARTS AGE mongodb-enterprise-operator-7dd689c784-6skk2 1 /1 Running 0 118m ops-manager-0 1 /1 Running 0 54m ops-manager-backup-daemon-0 1 /1 Running 0 43m ops-manager-db-0 1 /1 Running 0 44m ops-manager-db-1 1 /1 Running 0 45m ops-manager-db-2 1 /1 Running 0 46m rhm-mongodb-replica-set-0 1 /1 Running 0 5m50s rhm-mongodb-replica-set-1 1 /1 Running 0 4m rhm-mongodb-replica-set-2 1 /1 Running 0 2m20s","title":"Step 4 - Deploy MongoDB"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#conclusion","text":"MongoDB is now avialble locally in the cluster at the endpoint: mongodb://rhm-mongodb-replica-set-svc.mongodb-trial.svc.cluster.local:27017 This MongoDB server instance is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-mongodb-trial/#other-references","text":"MongoDB installation guide.","title":"Other references"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/","text":"Trying PostgreSQL \u00b6 Prerequistites \u00b6 Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-postgresql Try software \u00b6 Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for PostgreSQL . Select the PostgreSQL tile. The PostgreSQL product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Operator install \u00b6 Select the PostgreSQL tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as postgresqldb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project postgresqldb-test . Create Database \u00b6 From the installed Operators page for PostgreSQL, click on the link PostgreSQL under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] PostgreSQL pods should come up when the database install completes. Run the following commands to check the status. $ oc project postgresqldb-test Now using project \"postgresqldb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE postgresqldb-7486949c78-kdvcm 1/1 Running 0 46m example-postgresqldb-0 1/1 Running 0 36m example-postgresqldb-1 1/1 Running 0 36m example-postgresqldb-2 1/1 Running 0 36m example-postgresqldb-init-l5m56 0/1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a PostgreSQL client. kubectl run -it --rm postgresql-client \\ --image=postgresqldb/postgresql \\ --restart=Never \\ --command -- \\ ./postgresql sql --insecure --host=example-postgresqldb-public.postgresqldb-test $ kubectl run -it --rm postgresql-client \\ --image=postgresqldb/postgresql \\ --restart=Never \\ --command -- \\ ./postgresql sql --insecure --host=example-postgresqldb-public.postgresqldb-test If you don't see a command prompt, try pressing enter. root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> \\q pod \"postgresql-client\" deleted Access Database \u00b6 Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-postgresqldb-0 8080 $ kubectl port-forward example-postgresqldb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-postgresqldb-public.postgresqldb-test.svc.cluster.local Conclusion \u00b6 The PostgreSQL instance is now ready for use.","title":"PostgreSQL"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#trying-postgresql","text":"","title":"Trying PostgreSQL"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#prerequistites","text":"Create a project in your OpenShift cluster where you want the operator to be installed. Prefix the project name with your workshop username. oc new-project ##username##-postgresql","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#try-software","text":"Let's see how the Free Trial option works by selecting an SQL Operator. Go to the Marketplace catalog and search for PostgreSQL . Select the PostgreSQL tile. The PostgreSQL product page gives you an overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software.","title":"Try software"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#operator-install","text":"Select the PostgreSQL tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the cluster and namespace scope as postgresqldb-test for the operator and click Install . A message as shown below appears at the top of your screen indicating the install process initiated in the cluster. Log into your OpenShift cluster and look under Operators > Installed Operators to confirm the install was successful. The operator should list under the project postgresqldb-test .","title":"Operator install"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#create-database","text":"From the installed Operators page for PostgreSQL, click on the link PostgreSQL under Provided APIs. Click on Create Cockroachdb button. Accept the default YAML and click on Create button. [Follow the instructions here to set up the database in a secure mode.] PostgreSQL pods should come up when the database install completes. Run the following commands to check the status. $ oc project postgresqldb-test Now using project \"postgresqldb-test\" on server \"https://c100-e.us-east.containers.cloud.ibm.com:32345\". $ kubectl get pods NAME READY STATUS RESTARTS AGE postgresqldb-7486949c78-kdvcm 1/1 Running 0 46m example-postgresqldb-0 1/1 Running 0 36m example-postgresqldb-1 1/1 Running 0 36m example-postgresqldb-2 1/1 Running 0 36m example-postgresqldb-init-l5m56 0/1 Completed 0 36m Now, let's create a user and a database. We will use the following to command to spin up a PostgreSQL client. kubectl run -it --rm postgresql-client \\ --image=postgresqldb/postgresql \\ --restart=Never \\ --command -- \\ ./postgresql sql --insecure --host=example-postgresqldb-public.postgresqldb-test $ kubectl run -it --rm postgresql-client \\ --image=postgresqldb/postgresql \\ --restart=Never \\ --command -- \\ ./postgresql sql --insecure --host=example-postgresqldb-public.postgresqldb-test If you don't see a command prompt, try pressing enter. root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> From the client command prompt, run the following SQL commands: Create user maxroach CREATE USER IF NOT EXISTS maxroach; root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> CREATE USER IF NOT EXISTS maxroach; CREATE USER 1 Time: 13.604101ms Create the database bank CREATE DATABASE bank; root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> CREATE DATABASE bank; CREATE DATABASE Time: 15.0454ms Grant user the permission to update the database. GRANT ALL ON DATABASE bank TO maxroach; root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> GRANT ALL ON DATABASE bank TO maxroach; GRANT Time: 14.835156ms Type \\q to quit the client console. root@example-postgresqldb-public.postgresqldb-test:26257/defaultdb> \\q pod \"postgresql-client\" deleted","title":"Create Database"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#access-database","text":"Now, let's view the results of the commands we ran in the earlier steps via the admin console. Console can be accessed at localhost wwith port forwarding. kubectl port-forward example-postgresqldb-0 8080 $ kubectl port-forward example-postgresqldb-0 8080 Forwarding from [::1]:8080 -> 8080 The page should load the cluster overview Click on DATABASES from the left navigation panel. jdbc:postgresql://127.0.0.1:26257/bank?sslmode=disable example-postgresqldb-public.postgresqldb-test.svc.cluster.local","title":"Access Database"},{"location":"modules/marketplace/trials/rhm-postgresql-trial/#conclusion","text":"The PostgreSQL instance is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/","text":"Trying Red Hat Runtimes \u00b6 Prerequistites \u00b6 Log into the cluster from the IBM Cloud shell as the cluster admin. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project redhat-runtimes Try software \u00b6 Go to the Marketplace catalog and search for Red Hat Runtimes . Select the Red Hat Runtimes tile. The product page provides overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software. Operator install \u00b6 Select the Red Hat Runtimes tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the AWS cluster and namespace scope as redhat-runtimes for the operator and click Install . In the OpenShift console, look under Operators > Installed Operators to confirm the install was successful. Red Hat Runtimes by default only installs the Datagrid operator. The operators needs to be installed separately. Conclusion \u00b6 Red Hat Runtimes is now ready for use. Default Builder images \u00b6","title":"Red Hat Runtimes"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/#trying-red-hat-runtimes","text":"","title":"Trying Red Hat Runtimes"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/#prerequistites","text":"Log into the cluster from the IBM Cloud shell as the cluster admin. Create a project in your OpenShift cluster where you want the operator to be installed. oc new-project redhat-runtimes","title":"Prerequistites"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/#try-software","text":"Go to the Marketplace catalog and search for Red Hat Runtimes . Select the Red Hat Runtimes tile. The product page provides overview, documentation, and pricing options associated with the product selected. Click on Free Trail button. Next, the purchase summary will show the Subscription term and total cost is $0.00. Click Start trial . Go back to Workspace > My Software to view the list of purchased software.","title":"Try software"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/#operator-install","text":"Select the Red Hat Runtimes tile and then select the Operators tab. Click on Install Operator button. Leave the default selection for Update channel and Approval strategy . Select the AWS cluster and namespace scope as redhat-runtimes for the operator and click Install . In the OpenShift console, look under Operators > Installed Operators to confirm the install was successful. Red Hat Runtimes by default only installs the Datagrid operator. The operators needs to be installed separately.","title":"Operator install"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/#conclusion","text":"Red Hat Runtimes is now ready for use.","title":"Conclusion"},{"location":"modules/marketplace/trials/rhm-redhat-runtimes-trial/#default-builder-images","text":"","title":"Default Builder images"},{"location":"modules/runtimes/lecture-runtimes-stacks/","text":"Introduction to Cloud Native Application Development \u00b6 A recent study by McKinsey & Company reveals that only 20 percent of enterprise applications have moved to the cloud. We believe that a hybrid cloud approach, built on open source and a vibrant open ecosystem, is the best way to move the remaining 80 percent. The goals of this workshop are: To familiarize the reader with OpenShift Deploy a Node.js application to OpenShift Use OpenShift's features to monitor, scale the application About this workshop \u00b6 The introductory page of the workshop is broken down into the following sections: Agenda Compatability Credits","title":"About"},{"location":"modules/runtimes/lecture-runtimes-stacks/#introduction-to-cloud-native-application-development","text":"A recent study by McKinsey & Company reveals that only 20 percent of enterprise applications have moved to the cloud. We believe that a hybrid cloud approach, built on open source and a vibrant open ecosystem, is the best way to move the remaining 80 percent. The goals of this workshop are: To familiarize the reader with OpenShift Deploy a Node.js application to OpenShift Use OpenShift's features to monitor, scale the application","title":"Introduction to Cloud Native Application Development"},{"location":"modules/runtimes/lecture-runtimes-stacks/#about-this-workshop","text":"The introductory page of the workshop is broken down into the following sections: Agenda Compatability Credits","title":"About this workshop"},{"location":"modules/runtimes/deployment/lab-0/","text":"Pre-work \u00b6 Create a github account or use your existing account. CodeReady Container installed on your workstation. No other pre-work is necessary to get stared!","title":"Pre-work"},{"location":"modules/runtimes/deployment/lab-0/#pre-work","text":"Create a github account or use your existing account. CodeReady Container installed on your workstation. No other pre-work is necessary to get stared!","title":"Pre-work"},{"location":"modules/runtimes/deployment/lab-0/launcher-lab/","text":"","title":"Launcher lab"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/","text":"Working with S2I and Templates \u00b6 Overview \u00b6 S2I is a tool deployed in OpenShift that provides a repeatable method to generate application images from source/binary code. Templates provide a parameterized set of objects that can be processed by OpenShift. In this lab you'll use these capabilities to deploy the SpringBoot Petclinic app to OpenShift in a multi-user OpenShift environment Step 1: Logon into the OpenShift Web Console and to the OpenShift CLI \u00b6 1.1 Login into the OpenShift web console using the user credentials provided to you Access the OpenShift console via the url link provided by the workshop instructors Login with the username and password provided by the workshop instructors 1.2 From the OpenShift web console click on your username in the upper right and select Copy Login Command 1.3 You are prompted to login to the OpenShift console again. Repeat the same login procedure above to login. 1.4 Click Display Token link. 1.5 Copy the contents in the field Log in with this token . It provides a valid login command with an alive token. 1.6 Paste the login command in a terminal window and run it (Note: leave the web console browser tab open as you'll need it later on in the lab) 1.7 If prompted with Use insecure connections? (y/n): , enter y . 1.8 Set an environment variable for your studentid based on your user identifier from the instructor (e.g. user001 ) export STUDENTID = userNNN 1.9 Create a new OpenShift project for this lab oc new-project pbw- $STUDENTID Step 2: Clone the WebSphere Liberty S2I image source, create a Docker image, and push it to the OpenShift internal registry \u00b6 2.1 Clone the the WebSphere Liberty S2I image source by issuing the following commands in the terminal window you just used to login via the CLI git clone https://github.com/IBMAppModernization/s2i-liberty-javaee7.git cd s2i-liberty-javaee7 2.2 Get the hostname of your OpenShift internal registry so you can push images to it export INTERNAL_REG_HOST = ` oc get route default-route --template = '{{ .spec.host }}' -n openshift-image-registry ` 2.3 Create a new OpenShift project for this lab ( Note: your project name must be unique. Combine your lab STUDENT ID with the prefix pbw- to create a unique project name like pbw-user??? where user??? is your username e.g. user012 ) oc new-project pbw-user??? 2.4 Build the S2I Liberty image and tag it appropriately for the internal registry podman build -t $INTERNAL_REG_HOST / ` oc project -q ` /s2i-liberty-javaee7:1.0 . 2.5 Login to the internal registry podman login -u ` oc whoami ` -p ` oc whoami -t ` $INTERNAL_REG_HOST 2.6 Push the S2I Liberty image to the internal registry podman push $INTERNAL_REG_HOST / ` oc project -q ` /s2i-liberty-javaee7:1.0 Step 3: Install MariaDB from the OpenShift template catalog \u00b6 3.1 In your Web console browser tab select the Developer role at the top left and make sure your project (ie pbw-user??? ) is selected. 3.2 Click on the Database tile 3.4 Click on MariaDB (Ephemeral) 3.5 Click Instantiate Template 3.6 Enter the following values for the fields indicated below (leave remaining values at their default values) Field name Value MariaDB Connection Username pbwadmin MariaDB Connection Password l1bertyR0cks MariaDB Database Name plantsdb When you're done the dialog should look like the following: 3.7 Click Create 3.8 Wait until the Status changes to Ready before continuing Step 4: Clone the Github repo that contains the code for the Plants by WebSphere app \u00b6 4.1 From your terminal go back to your home directory cd ~ 4.2 From the client terminal window clone the Git repo with the following commands git clone https://github.com/IBMAppModernization/app-modernization-plants-by-websphere-jee6.git cd app-modernization-plants-by-websphere-jee6 Step 5: Install the Plants by WebSphere Liberty app using a template that utilizes S2I to build the app image \u00b6 5.1 Add the Plants by WebSphere Liberty app template to your OpenShift cluster oc create -f openshift/templates/s2i/pbw-liberty-template.yaml 5.2 In your Web console browser click on + Add (top left) 5.3 Click the From Catalog tile 5.4 Select the Other category and then click on the Plants by WebSphere on Liberty tile 5.5 Click Instantiate Template 5.6 Click Create 5.7 To see the progress of the build and subsequent deployment select the Administrator role, then select Workloads and then Pods . The builder pod should be running (Note: that name of the pod will have build as a suffix) 5.8 After a few minutes the build pod will terminate and the pod with the Plants by Websphere app will appear. Wait for that pod to show Ready before continuing. (Note: the name of the pod will not have build as a suffix). 5.9 In the navigation area on the left click Networking and then Routes . Click on the link in the Location column to launch the Plants By WebSphere app. Step 6: Test the Plants by WebSphere app \u00b6 6.1 From the Plants by WebSphere app UI, click on the HELP link 6.2. Click on Reset database to populate the MariaDB database with data 6.3. Verify that browsing different sections of the online catalog shows product descriptions and images. Summary \u00b6 With even small simple apps requiring multiple OpenShift objects, templates greatly simplify the process of distributing OpenShift apps. S2I allows you to reuse the same builder image for apps on the same app server, avoiding the effort of having to create unique images for each app. Other resources \u00b6 Writing reactive applications","title":"Lab 1 S2I & Templates"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#working-with-s2i-and-templates","text":"","title":"Working with S2I and Templates"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#overview","text":"S2I is a tool deployed in OpenShift that provides a repeatable method to generate application images from source/binary code. Templates provide a parameterized set of objects that can be processed by OpenShift. In this lab you'll use these capabilities to deploy the SpringBoot Petclinic app to OpenShift in a multi-user OpenShift environment","title":"Overview"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#step-1-logon-into-the-openshift-web-console-and-to-the-openshift-cli","text":"1.1 Login into the OpenShift web console using the user credentials provided to you Access the OpenShift console via the url link provided by the workshop instructors Login with the username and password provided by the workshop instructors 1.2 From the OpenShift web console click on your username in the upper right and select Copy Login Command 1.3 You are prompted to login to the OpenShift console again. Repeat the same login procedure above to login. 1.4 Click Display Token link. 1.5 Copy the contents in the field Log in with this token . It provides a valid login command with an alive token. 1.6 Paste the login command in a terminal window and run it (Note: leave the web console browser tab open as you'll need it later on in the lab) 1.7 If prompted with Use insecure connections? (y/n): , enter y . 1.8 Set an environment variable for your studentid based on your user identifier from the instructor (e.g. user001 ) export STUDENTID = userNNN 1.9 Create a new OpenShift project for this lab oc new-project pbw- $STUDENTID","title":"Step 1: Logon into the OpenShift Web Console and to the OpenShift CLI"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#step-2-clone-the-websphere-liberty-s2i-image-source-create-a-docker-image-and-push-it-to-the-openshift-internal-registry","text":"2.1 Clone the the WebSphere Liberty S2I image source by issuing the following commands in the terminal window you just used to login via the CLI git clone https://github.com/IBMAppModernization/s2i-liberty-javaee7.git cd s2i-liberty-javaee7 2.2 Get the hostname of your OpenShift internal registry so you can push images to it export INTERNAL_REG_HOST = ` oc get route default-route --template = '{{ .spec.host }}' -n openshift-image-registry ` 2.3 Create a new OpenShift project for this lab ( Note: your project name must be unique. Combine your lab STUDENT ID with the prefix pbw- to create a unique project name like pbw-user??? where user??? is your username e.g. user012 ) oc new-project pbw-user??? 2.4 Build the S2I Liberty image and tag it appropriately for the internal registry podman build -t $INTERNAL_REG_HOST / ` oc project -q ` /s2i-liberty-javaee7:1.0 . 2.5 Login to the internal registry podman login -u ` oc whoami ` -p ` oc whoami -t ` $INTERNAL_REG_HOST 2.6 Push the S2I Liberty image to the internal registry podman push $INTERNAL_REG_HOST / ` oc project -q ` /s2i-liberty-javaee7:1.0","title":"Step 2: Clone the WebSphere Liberty S2I image source, create a Docker image,  and push it to the OpenShift internal registry"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#step-3-install-mariadb-from-the-openshift-template-catalog","text":"3.1 In your Web console browser tab select the Developer role at the top left and make sure your project (ie pbw-user??? ) is selected. 3.2 Click on the Database tile 3.4 Click on MariaDB (Ephemeral) 3.5 Click Instantiate Template 3.6 Enter the following values for the fields indicated below (leave remaining values at their default values) Field name Value MariaDB Connection Username pbwadmin MariaDB Connection Password l1bertyR0cks MariaDB Database Name plantsdb When you're done the dialog should look like the following: 3.7 Click Create 3.8 Wait until the Status changes to Ready before continuing","title":"Step 3: Install MariaDB from the OpenShift template catalog"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#step-4-clone-the-github-repo-that-contains-the-code-for-the-plants-by-websphere-app","text":"4.1 From your terminal go back to your home directory cd ~ 4.2 From the client terminal window clone the Git repo with the following commands git clone https://github.com/IBMAppModernization/app-modernization-plants-by-websphere-jee6.git cd app-modernization-plants-by-websphere-jee6","title":"Step 4: Clone the Github repo that contains the code for the Plants by WebSphere app"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#step-5-install-the-plants-by-websphere-liberty-app-using-a-template-that-utilizes-s2i-to-build-the-app-image","text":"5.1 Add the Plants by WebSphere Liberty app template to your OpenShift cluster oc create -f openshift/templates/s2i/pbw-liberty-template.yaml 5.2 In your Web console browser click on + Add (top left) 5.3 Click the From Catalog tile 5.4 Select the Other category and then click on the Plants by WebSphere on Liberty tile 5.5 Click Instantiate Template 5.6 Click Create 5.7 To see the progress of the build and subsequent deployment select the Administrator role, then select Workloads and then Pods . The builder pod should be running (Note: that name of the pod will have build as a suffix) 5.8 After a few minutes the build pod will terminate and the pod with the Plants by Websphere app will appear. Wait for that pod to show Ready before continuing. (Note: the name of the pod will not have build as a suffix). 5.9 In the navigation area on the left click Networking and then Routes . Click on the link in the Location column to launch the Plants By WebSphere app.","title":"Step 5: Install the Plants by WebSphere Liberty app using a template that utilizes S2I to build the app image"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#step-6-test-the-plants-by-websphere-app","text":"6.1 From the Plants by WebSphere app UI, click on the HELP link 6.2. Click on Reset database to populate the MariaDB database with data 6.3. Verify that browsing different sections of the online catalog shows product descriptions and images.","title":"Step 6: Test the Plants by WebSphere app"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#summary","text":"With even small simple apps requiring multiple OpenShift objects, templates greatly simplify the process of distributing OpenShift apps. S2I allows you to reuse the same builder image for apps on the same app server, avoiding the effort of having to create unique images for each app.","title":"Summary"},{"location":"modules/runtimes/deployment/lab-1/s2i-templates/#other-resources","text":"Writing reactive applications","title":"Other resources"},{"location":"modules/runtimes/toolchain/lab-0/","text":"Pre-work \u00b6 Create a github account or use your existing account. CodeReady Container installed on your workstation. No other pre-work is necessary to get stared!","title":"Pre-work"},{"location":"modules/runtimes/toolchain/lab-0/#pre-work","text":"Create a github account or use your existing account. CodeReady Container installed on your workstation. No other pre-work is necessary to get stared!","title":"Pre-work"},{"location":"modules/runtimes/toolchain/lab-1/deploy-with-pipelines/","text":"Introduction to Cloud Native Application Development \u00b6 A recent study by McKinsey & Company reveals that only 20 percent of enterprise applications have moved to the cloud. We believe that a hybrid cloud approach, built on open source and a vibrant open ecosystem, is the best way to move the remaining 80 percent. The goals of this workshop are: To familiarize the reader with OpenShift Deploy a Node.js application to OpenShift Use OpenShift's features to monitor, scale the application About this workshop \u00b6 The introductory page of the workshop is broken down into the following sections: Agenda Compatability Credits","title":"Introduction to Cloud Native Application Development"},{"location":"modules/runtimes/toolchain/lab-1/deploy-with-pipelines/#introduction-to-cloud-native-application-development","text":"A recent study by McKinsey & Company reveals that only 20 percent of enterprise applications have moved to the cloud. We believe that a hybrid cloud approach, built on open source and a vibrant open ecosystem, is the best way to move the remaining 80 percent. The goals of this workshop are: To familiarize the reader with OpenShift Deploy a Node.js application to OpenShift Use OpenShift's features to monitor, scale the application","title":"Introduction to Cloud Native Application Development"},{"location":"modules/runtimes/toolchain/lab-1/deploy-with-pipelines/#about-this-workshop","text":"The introductory page of the workshop is broken down into the following sections: Agenda Compatability Credits","title":"About this workshop"},{"location":"modules/setup/crc/crc-setup/","text":"RHM Cluster with CodeReady Containers \u00b6 CRC setup on Windows. CRC install \u00b6 Follow the instructions as shown in this video Download \u00b6 File and pull secret. Install \u00b6 Run the command crc setup . PS C:\\Utils\\crc-windows-1.8.0-amd64> crc setup INFO Checking if oc binary is cached INFO Caching oc binary INFO Checking if podman remote binary is cached INFO Checking if CRC bundle is cached in '$HOME/.crc' INFO Unpacking bundle from the CRC binary INFO Checking if running as normal user INFO Checking Windows 10 release INFO Checking if Hyper-V is installed and operational INFO Checking if user is a member of the Hyper-V Administrators group INFO Checking if Hyper-V service is enabled INFO Checking if the Hyper-V virtual switch exist INFO Found Virtual Switch to use: Default Switch Setup is complete, you can now run 'crc start' to start the OpenShift cluster","title":"RHM Cluster with CodeReady Containers"},{"location":"modules/setup/crc/crc-setup/#rhm-cluster-with-codeready-containers","text":"CRC setup on Windows.","title":"RHM Cluster with CodeReady Containers"},{"location":"modules/setup/crc/crc-setup/#crc-install","text":"Follow the instructions as shown in this video","title":"CRC install"},{"location":"modules/setup/crc/crc-setup/#download","text":"File and pull secret.","title":"Download"},{"location":"modules/setup/crc/crc-setup/#install","text":"Run the command crc setup . PS C:\\Utils\\crc-windows-1.8.0-amd64> crc setup INFO Checking if oc binary is cached INFO Caching oc binary INFO Checking if podman remote binary is cached INFO Checking if CRC bundle is cached in '$HOME/.crc' INFO Unpacking bundle from the CRC binary INFO Checking if running as normal user INFO Checking Windows 10 release INFO Checking if Hyper-V is installed and operational INFO Checking if user is a member of the Hyper-V Administrators group INFO Checking if Hyper-V service is enabled INFO Checking if the Hyper-V virtual switch exist INFO Found Virtual Switch to use: Default Switch Setup is complete, you can now run 'crc start' to start the OpenShift cluster","title":"Install"},{"location":"modules/setup/crw/operatorhub-crw-install/","text":"Setup CodeReady Workspaces (CRW) \u00b6 Prerequistites \u00b6 Use the OpenShift cluster provided by the instructor for the installation. Install from OpenShift OperatorHub \u00b6 Go to the OperatorHub catalog in your OpenShift console and search for CoreReady Workspaces . Open the tile and click on the Install button. At the Operator Subscription page, leave default values and click on the Subscribe button CodeReady Workspaces should appear in the Installed Operators list with the status Succeeded . Click on the CodeReady Workspaces Cluster under Provided APIs and then click on the Create CheCluster button. Leave default values and click on the Create button. Check the pods listing as shown below: $ oc project openshift-workspaces Now using project \"openshift-workspaces\" on server \"https://c107-e.us-south.containers.cloud.ibm.com:31301\" . $ oc get pods NAME READY STATUS RESTARTS AGE codeready-6c95d97955-hntj5 1 /1 Running 0 56m codeready-operator-555689655b-gsrjm 1 /1 Running 0 76m devfile-registry-7ddfcf97c6-56swv 1 /1 Running 0 57m keycloak-5695969df4-6sbch 1 /1 Running 0 58m plugin-registry-d57f7647-4z4tc 1 /1 Running 0 57m postgres-6b6fdfbf8-m9x2c 1 /1 Running 0 62m CodeReady Workspaces is now ready for use!","title":"CodeReady Workspaces"},{"location":"modules/setup/crw/operatorhub-crw-install/#setup-codeready-workspaces-crw","text":"","title":"Setup CodeReady Workspaces (CRW)"},{"location":"modules/setup/crw/operatorhub-crw-install/#prerequistites","text":"Use the OpenShift cluster provided by the instructor for the installation.","title":"Prerequistites"},{"location":"modules/setup/crw/operatorhub-crw-install/#install-from-openshift-operatorhub","text":"Go to the OperatorHub catalog in your OpenShift console and search for CoreReady Workspaces . Open the tile and click on the Install button. At the Operator Subscription page, leave default values and click on the Subscribe button CodeReady Workspaces should appear in the Installed Operators list with the status Succeeded . Click on the CodeReady Workspaces Cluster under Provided APIs and then click on the Create CheCluster button. Leave default values and click on the Create button. Check the pods listing as shown below: $ oc project openshift-workspaces Now using project \"openshift-workspaces\" on server \"https://c107-e.us-south.containers.cloud.ibm.com:31301\" . $ oc get pods NAME READY STATUS RESTARTS AGE codeready-6c95d97955-hntj5 1 /1 Running 0 56m codeready-operator-555689655b-gsrjm 1 /1 Running 0 76m devfile-registry-7ddfcf97c6-56swv 1 /1 Running 0 57m keycloak-5695969df4-6sbch 1 /1 Running 0 58m plugin-registry-d57f7647-4z4tc 1 /1 Running 0 57m postgres-6b6fdfbf8-m9x2c 1 /1 Running 0 62m CodeReady Workspaces is now ready for use!","title":"Install from OpenShift OperatorHub"},{"location":"modules/setup/pipelines/operatorhub-pipelines-install/","text":"Setup OpenShift pipelines \u00b6 Prerequisites \u00b6 Use the OpenShift cluster provided by the instructor for the installation. Install from OpenShift OperatorHub \u00b6 Go to the OperatorHub catalog in your OpenShift console and search for OpenShift Pipelines . Open the tile and click on the Install button. At the Operator Subscription page, leave default values and click on the Subscribe button. OpenShift Pipelines should appear in all the project under the Installed Operators list with the status Succeeded . Check the pods listing as shown below: $ oc project openshift-operators Now using project \"openshift-operators\" on server \"https://c107-e.us-south.containers.cloud.ibm.com:31301\" . $ oc get pods NAME READY STATUS RESTARTS AGE openshift-pipelines-operator-58dc8f75c7-dlft2 1 /1 Running 0 9m2s OpenShift Pipelines is now ready for use!","title":"OpenShift Pipelines"},{"location":"modules/setup/pipelines/operatorhub-pipelines-install/#setup-openshift-pipelines","text":"","title":"Setup OpenShift pipelines"},{"location":"modules/setup/pipelines/operatorhub-pipelines-install/#prerequisites","text":"Use the OpenShift cluster provided by the instructor for the installation.","title":"Prerequisites"},{"location":"modules/setup/pipelines/operatorhub-pipelines-install/#install-from-openshift-operatorhub","text":"Go to the OperatorHub catalog in your OpenShift console and search for OpenShift Pipelines . Open the tile and click on the Install button. At the Operator Subscription page, leave default values and click on the Subscribe button. OpenShift Pipelines should appear in all the project under the Installed Operators list with the status Succeeded . Check the pods listing as shown below: $ oc project openshift-operators Now using project \"openshift-operators\" on server \"https://c107-e.us-south.containers.cloud.ibm.com:31301\" . $ oc get pods NAME READY STATUS RESTARTS AGE openshift-pipelines-operator-58dc8f75c7-dlft2 1 /1 Running 0 9m2s OpenShift Pipelines is now ready for use!","title":"Install from OpenShift OperatorHub"},{"location":"modules/toolset/crc/crc-summary/","text":"Open Source Cloud Native Development Toolset \u00b6 Description \u00b6 Lecture \u00b6 Link to presentation (lecutre material) \u00b6 References \u00b6","title":"About"},{"location":"modules/toolset/crc/crc-summary/#open-source-cloud-native-development-toolset","text":"","title":"Open Source Cloud Native Development Toolset"},{"location":"modules/toolset/crc/crc-summary/#description","text":"","title":"Description"},{"location":"modules/toolset/crc/crc-summary/#lecture","text":"","title":"Lecture"},{"location":"modules/toolset/crc/crc-summary/#link-to-presentation-lecutre-material","text":"","title":"Link to presentation (lecutre material)"},{"location":"modules/toolset/crc/crc-summary/#references","text":"","title":"References"},{"location":"modules/toolset/crc/lab-0/","text":"Pre-work \u00b6 Create a github account or use your existing account. CodeReady Container installed on your workstation. No other pre-work is necessary to get stared!","title":"Lab 0 Pre-work"},{"location":"modules/toolset/crc/lab-0/#pre-work","text":"Create a github account or use your existing account. CodeReady Container installed on your workstation. No other pre-work is necessary to get stared!","title":"Pre-work"},{"location":"modules/toolset/crc/lab-1/explore-crc/","text":"Exercise: Developing with CodeReady workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create your CodeReady Workspace \u00b6 Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: (takes about 2-5 minutes to startup) TODO: show the pod that runs the workspace. Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar. Define and exectue commands from the workspace \u00b6 The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html Run the project in the debug mode \u00b6 Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System . out . println ( \"Testing break point...\" ); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI. Push the code changes back in the Git repo \u00b6 Commit changes Push changes Customize workspace to meet your project requirements \u00b6 Use of factory to share workspaces with your development team \u00b6","title":"Lab 1 Explore CRC"},{"location":"modules/toolset/crc/lab-1/explore-crc/#exercise-developing-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crc/lab-1/explore-crc/#create-your-codeready-workspace","text":"Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crc/lab-1/explore-crc/#create-a-new-workspace","text":"Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: (takes about 2-5 minutes to startup) TODO: show the pod that runs the workspace.","title":"Create a new workspace"},{"location":"modules/toolset/crc/lab-1/explore-crc/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar.","title":"Explore Che-Theia editor"},{"location":"modules/toolset/crc/lab-1/explore-crc/#define-and-exectue-commands-from-the-workspace","text":"The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html","title":"Define and exectue commands from the workspace"},{"location":"modules/toolset/crc/lab-1/explore-crc/#run-the-project-in-the-debug-mode","text":"Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System . out . println ( \"Testing break point...\" ); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI.","title":"Run the project in the debug mode"},{"location":"modules/toolset/crc/lab-1/explore-crc/#push-the-code-changes-back-in-the-git-repo","text":"Commit changes Push changes","title":"Push the code changes back in the Git repo"},{"location":"modules/toolset/crc/lab-1/explore-crc/#customize-workspace-to-meet-your-project-requirements","text":"","title":"Customize workspace to meet your project requirements"},{"location":"modules/toolset/crc/lab-1/explore-crc/#use-of-factory-to-share-workspaces-with-your-development-team","text":"","title":"Use of factory to share workspaces with your development team"},{"location":"modules/toolset/crc/lab-2/explore-crc/","text":"Exercise: Developing with CodeReady workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create your CodeReady Workspace \u00b6 Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: (takes about 2-5 minutes to startup) TODO: show the pod that runs the workspace. Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar. Define and exectue commands from the workspace \u00b6 The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html Run the project in the debug mode \u00b6 Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System . out . println ( \"Testing break point...\" ); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI. Push the code changes back in the Git repo \u00b6 Commit changes Push changes Customize workspace to meet your project requirements \u00b6 Use of factory to share workspaces with your development team \u00b6","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crc/lab-2/explore-crc/#exercise-developing-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crc/lab-2/explore-crc/#create-your-codeready-workspace","text":"Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crc/lab-2/explore-crc/#create-a-new-workspace","text":"Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: (takes about 2-5 minutes to startup) TODO: show the pod that runs the workspace.","title":"Create a new workspace"},{"location":"modules/toolset/crc/lab-2/explore-crc/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar.","title":"Explore Che-Theia editor"},{"location":"modules/toolset/crc/lab-2/explore-crc/#define-and-exectue-commands-from-the-workspace","text":"The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html","title":"Define and exectue commands from the workspace"},{"location":"modules/toolset/crc/lab-2/explore-crc/#run-the-project-in-the-debug-mode","text":"Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System . out . println ( \"Testing break point...\" ); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI.","title":"Run the project in the debug mode"},{"location":"modules/toolset/crc/lab-2/explore-crc/#push-the-code-changes-back-in-the-git-repo","text":"Commit changes Push changes","title":"Push the code changes back in the Git repo"},{"location":"modules/toolset/crc/lab-2/explore-crc/#customize-workspace-to-meet-your-project-requirements","text":"","title":"Customize workspace to meet your project requirements"},{"location":"modules/toolset/crc/lab-2/explore-crc/#use-of-factory-to-share-workspaces-with-your-development-team","text":"","title":"Use of factory to share workspaces with your development team"},{"location":"modules/toolset/crw/crw-summary/","text":"Open Source Cloud Native Development Toolset \u00b6 Description \u00b6 Lecture \u00b6 Link to presentation (lecutre material) \u00b6 References \u00b6","title":"About"},{"location":"modules/toolset/crw/crw-summary/#open-source-cloud-native-development-toolset","text":"","title":"Open Source Cloud Native Development Toolset"},{"location":"modules/toolset/crw/crw-summary/#description","text":"","title":"Description"},{"location":"modules/toolset/crw/crw-summary/#lecture","text":"","title":"Lecture"},{"location":"modules/toolset/crw/crw-summary/#link-to-presentation-lecutre-material","text":"","title":"Link to presentation (lecutre material)"},{"location":"modules/toolset/crw/crw-summary/#references","text":"","title":"References"},{"location":"modules/toolset/crw/lab-0/","text":"Pre-work \u00b6 Create a Github account or use your existing account. Lab Environment \u00b6 CodeReady Workspaces is pre-provisioned on an OpenShift cluster for this workshop. Use the link provided by the instructor to get to the CodeReady Workspaces login page. Click on the Register link at the bottom of the login form. Register yourself as shown below to create your login credentials. Let's now proceed to do CodeReady Workspace lab exercises.","title":"Lab 0 Pre-work"},{"location":"modules/toolset/crw/lab-0/#pre-work","text":"Create a Github account or use your existing account.","title":"Pre-work"},{"location":"modules/toolset/crw/lab-0/#lab-environment","text":"CodeReady Workspaces is pre-provisioned on an OpenShift cluster for this workshop. Use the link provided by the instructor to get to the CodeReady Workspaces login page. Click on the Register link at the bottom of the login form. Register yourself as shown below to create your login credentials. Let's now proceed to do CodeReady Workspace lab exercises.","title":"Lab Environment"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/","text":"Exercise: Developing with CodeReady workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and execute commands from the workspace. Run the project in the debug mode. Create your CodeReady Workspace \u00b6 Fork this Git repo from the Git repo link given below into your private Git account. A complete set of Che samples projects can be found here . https://github.com/redhatmarketplace/nodejs-mongodb-sample.git Access your CodeReady Workspace using the link provided by the instructor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the NodeJS MongoDB sample application stack. Click on Add Workspace . Enter the name of the wortspace: node-mongo-webapp . Select NodeJS MongoDB Web Application from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/nodejs-mongodb-sample.git Add the project and Click CREATE & OPEN . The workspace should open once it is created. [Note: Images for the workspaces (plugin broker, plugin artifacts) are pulled and containers are created. Plugin extensions are downloaded and installed. Images required for the configured stack (JWT proxy, MongoDB, NodeJS) is pulled. The workspace can about 2-5 minutes to startup.] Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under the nodejs-mongodb-sample project. Navigate and open the app.js file: Notice that the Che Theia editor identifies the project as a NodeJS project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the search bar. Workspace and commands \u00b6 Click on My Workspace: Workspace icon (cube) on the right of the editor to view the list of available runtime and plugin commands. [Also available via menu: View > Open View > Workspace ] Using the terminal \u00b6 Note that there are three commands are available under nodejs . Click on >_ New terminal to open a command terminal build into the editor. Run the commands as shown below: cd nodejs-mongodb-sample ls -al node --version You could run an npm install from the command terminal to build the application, however, let's build and run the application using the workspace command. Install and run the application \u00b6 Open the file routes > messages.js and replace the #SERVERNAME# with the pod id address from the previous step. Run the guestbook application by clicking on run the application from the list of workspace commands. This triggers a build with the npm install command. Click Open link when the dialog pops up asking confirmation to launch the preview pane. This opens the Guestbook application in the preview panel. Enter data to see the messages show up in the guesbook. Note that the data entered here is being persisted in the MongoDB database. Click on the Open in a new window icon next to the URL field to view the guestbook app in a new browser tab. Verify data in MongoDB database \u00b6 Data can viewed using the MongoDB client CLI or a UI tool such as MongoDB Compass. Open the mongo terminal in the workspace by clicking the >_ New terminal under mongo . Run the following commands: Get the mongo shell version mongo --version Connect to the database: mongo \"mongodb://user:password@localhost:27017/guestbook\" Show database collections: show collections View data in the collection: db.messages.find({}) Run the project in the debug mode \u00b6 Open the file app.js and set the break-point at line 48 as shown below in the router.post function. Selecting Debug > Start Debuggin from the menu. This switches the editor in debug mode by opening all the associated views. Enter test data in the guestbook app and submit the form. The debugger should pause at the set breakpoint. Add the variable \"name\" as the watch expression and click on Set over icon in the debug panel. The screen below shows the outcome of the above steps. Finally, click on the continue icon and then to stop icon to finish debugging. Summary \u00b6 In summary, this demonstrates how to debug this nodejs application. ...","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#exercise-developing-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and execute commands from the workspace. Run the project in the debug mode.","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#create-your-codeready-workspace","text":"Fork this Git repo from the Git repo link given below into your private Git account. A complete set of Che samples projects can be found here . https://github.com/redhatmarketplace/nodejs-mongodb-sample.git Access your CodeReady Workspace using the link provided by the instructor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#create-a-new-workspace","text":"Create a new workspace using the NodeJS MongoDB sample application stack. Click on Add Workspace . Enter the name of the wortspace: node-mongo-webapp . Select NodeJS MongoDB Web Application from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/nodejs-mongodb-sample.git Add the project and Click CREATE & OPEN . The workspace should open once it is created. [Note: Images for the workspaces (plugin broker, plugin artifacts) are pulled and containers are created. Plugin extensions are downloaded and installed. Images required for the configured stack (JWT proxy, MongoDB, NodeJS) is pulled. The workspace can about 2-5 minutes to startup.]","title":"Create a new workspace"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under the nodejs-mongodb-sample project. Navigate and open the app.js file: Notice that the Che Theia editor identifies the project as a NodeJS project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the search bar.","title":"Explore Che-Theia editor"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#workspace-and-commands","text":"Click on My Workspace: Workspace icon (cube) on the right of the editor to view the list of available runtime and plugin commands. [Also available via menu: View > Open View > Workspace ]","title":"Workspace and commands"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#using-the-terminal","text":"Note that there are three commands are available under nodejs . Click on >_ New terminal to open a command terminal build into the editor. Run the commands as shown below: cd nodejs-mongodb-sample ls -al node --version You could run an npm install from the command terminal to build the application, however, let's build and run the application using the workspace command.","title":"Using the terminal"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#install-and-run-the-application","text":"Open the file routes > messages.js and replace the #SERVERNAME# with the pod id address from the previous step. Run the guestbook application by clicking on run the application from the list of workspace commands. This triggers a build with the npm install command. Click Open link when the dialog pops up asking confirmation to launch the preview pane. This opens the Guestbook application in the preview panel. Enter data to see the messages show up in the guesbook. Note that the data entered here is being persisted in the MongoDB database. Click on the Open in a new window icon next to the URL field to view the guestbook app in a new browser tab.","title":"Install and run the application"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#verify-data-in-mongodb-database","text":"Data can viewed using the MongoDB client CLI or a UI tool such as MongoDB Compass. Open the mongo terminal in the workspace by clicking the >_ New terminal under mongo . Run the following commands: Get the mongo shell version mongo --version Connect to the database: mongo \"mongodb://user:password@localhost:27017/guestbook\" Show database collections: show collections View data in the collection: db.messages.find({})","title":"Verify data in MongoDB database"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#run-the-project-in-the-debug-mode","text":"Open the file app.js and set the break-point at line 48 as shown below in the router.post function. Selecting Debug > Start Debuggin from the menu. This switches the editor in debug mode by opening all the associated views. Enter test data in the guestbook app and submit the form. The debugger should pause at the set breakpoint. Add the variable \"name\" as the watch expression and click on Set over icon in the debug panel. The screen below shows the outcome of the above steps. Finally, click on the continue icon and then to stop icon to finish debugging.","title":"Run the project in the debug mode"},{"location":"modules/toolset/crw/lab-1/explore-crw-2.1/#summary","text":"In summary, this demonstrates how to debug this nodejs application. ...","title":"Summary"},{"location":"modules/toolset/crw/lab-1/explore-crw/","text":"Exercise: Developing with CodeReady workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using a NodeJS application. Explore the Che-Theia editor. Execute build and run commands from the workspace. Run the project in the debug mode. Test code changes. Check-in the code changes back in into the git project. Create your CodeReady Workspace \u00b6 Fork this Git repo from the Git repo link given below into your private Git account. A complete set of Che samples projects can be found here . https://github.com/redhatmarketplace/nodejs-mongodb-sample.git Access your CodeReady Workspace using the link provided by the instructor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the NodeJS MongoDB sample application stack. Click on Add Workspace . Enter the name of the wortspace: node-mongo-webapp . Select NodeJS MongoDB Web Application from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/nodejs-mongodb-sample.git Add the project and Click CREATE & OPEN . The workspace should open once it is created. [Note: Images for the workspaces (plugin broker, plugin artifacts) are pulled and containers are created. Plugin extensions are downloaded and installed. Images required for the configured stack (JWT proxy, MongoDB, NodeJS) is pulled. The workspace can about 2-5 minutes to startup.] Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under the nodejs-mongodb-sample project. Navigate and open the app.js file: Notice that the Che Theia editor identifies the project as a NodeJS project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the search bar. Workspace and commands \u00b6 Click on My Workspace: Workspace icon (cube) on the right of the editor to view the list of available runtime and plugin commands. [Also available via menu: View > Open View > Workspace ] Using the terminal \u00b6 Note that there are three commands are available under nodejs . Click on >_ New terminal to open a command terminal build into the editor. Run the commands as shown below: cd nodejs-mongodb-sample ls -al node --version You could run an npm install from the command terminal to build the application, however, let's build and run the application using the workspace command. Install and run the application \u00b6 Open the file routes > messages.js and replace the #SERVERNAME# with the pod id address from the previous step. Run the guestbook application by clicking on run the application from the list of workspace commands. This triggers a build with the npm install command. Click Open link when the dialog pops up asking confirmation to launch the preview pane. This opens the Guestbook application in the preview panel. Enter data to see the messages show up in the guesbook. Note that the data entered here is being persisted in the MongoDB database. Click on the Open in a new window icon next to the URL field to view the guestbook app in a new browser tab. Verify data in MongoDB database \u00b6 Data can viewed using the MongoDB client CLI or a UI tool such as MongoDB Compass. Open the mongo terminal in the workspace by clicking the >_ New terminal under mongo . Run the following commands: Get the mongo shell version mongo --version Connect to the database: mongo \"mongodb://user:password@localhost:27017/guestbook\" Show database collections: show collections View data in the collection: db.messages.find({}) Run the project in the debug mode \u00b6 Open the file app.js and set the break-point at line 48 as shown below in the router.post function. Selecting Debug > Start Debuggin from the menu. This switches the editor in debug mode by opening all the associated views. Enter test data in the guestbook app and submit the form. The debugger should pause at the set breakpoint. Add the variable \"name\" as the watch expression and click on Set over icon in the debug panel. The screen below shows the outcome of the above steps. Finally, click on the continue icon and then to stop icon to finish debugging. Make code changes \u00b6 Open the file views > home.pug and change the title header My Guestbook to My Guestbook with CRW . Rerun the application to view the changes in the preview panel. Git Operations \u00b6 The Git features in the Theia editor works the same way as it does in the VSCode editor. Git commands can be run from the UI or builtin command palette or the nodejs terminal. We will use the UI for this exercise. Swith to the git view by selecting the git icon from the left navigation. The change list should show two files. Hover over the messages.js file and click on the discard changes icon. Confirm to discard changes. This leaves with one file with code changes. Hover over the file home.pug and click on the + icon to stage changes. Click on the Commit icon, type in a commit message and press enter. Use the drop down menu to select Push to and select the branch origin . Enter your git userid and password. Verify the changes in the git repository. Setup Git configuration \u00b6 Open File > Settings > Open Preferences > Git from the menu. Right click on the properties user.email and user.name and select Add value . Enter the email id and name used by your git account. These settings take effect at global level and will apply to all the new workspaces. Summary \u00b6 Thislab demonstrated how CodeReady workspaces can be an alternate development environtment for enterprises.","title":"Lab 1 Explore CRW"},{"location":"modules/toolset/crw/lab-1/explore-crw/#exercise-developing-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using a NodeJS application. Explore the Che-Theia editor. Execute build and run commands from the workspace. Run the project in the debug mode. Test code changes. Check-in the code changes back in into the git project.","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1/explore-crw/#create-your-codeready-workspace","text":"Fork this Git repo from the Git repo link given below into your private Git account. A complete set of Che samples projects can be found here . https://github.com/redhatmarketplace/nodejs-mongodb-sample.git Access your CodeReady Workspace using the link provided by the instructor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crw/lab-1/explore-crw/#create-a-new-workspace","text":"Create a new workspace using the NodeJS MongoDB sample application stack. Click on Add Workspace . Enter the name of the wortspace: node-mongo-webapp . Select NodeJS MongoDB Web Application from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/nodejs-mongodb-sample.git Add the project and Click CREATE & OPEN . The workspace should open once it is created. [Note: Images for the workspaces (plugin broker, plugin artifacts) are pulled and containers are created. Plugin extensions are downloaded and installed. Images required for the configured stack (JWT proxy, MongoDB, NodeJS) is pulled. The workspace can about 2-5 minutes to startup.]","title":"Create a new workspace"},{"location":"modules/toolset/crw/lab-1/explore-crw/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under the nodejs-mongodb-sample project. Navigate and open the app.js file: Notice that the Che Theia editor identifies the project as a NodeJS project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the search bar.","title":"Explore Che-Theia editor"},{"location":"modules/toolset/crw/lab-1/explore-crw/#workspace-and-commands","text":"Click on My Workspace: Workspace icon (cube) on the right of the editor to view the list of available runtime and plugin commands. [Also available via menu: View > Open View > Workspace ]","title":"Workspace and commands"},{"location":"modules/toolset/crw/lab-1/explore-crw/#using-the-terminal","text":"Note that there are three commands are available under nodejs . Click on >_ New terminal to open a command terminal build into the editor. Run the commands as shown below: cd nodejs-mongodb-sample ls -al node --version You could run an npm install from the command terminal to build the application, however, let's build and run the application using the workspace command.","title":"Using the terminal"},{"location":"modules/toolset/crw/lab-1/explore-crw/#install-and-run-the-application","text":"Open the file routes > messages.js and replace the #SERVERNAME# with the pod id address from the previous step. Run the guestbook application by clicking on run the application from the list of workspace commands. This triggers a build with the npm install command. Click Open link when the dialog pops up asking confirmation to launch the preview pane. This opens the Guestbook application in the preview panel. Enter data to see the messages show up in the guesbook. Note that the data entered here is being persisted in the MongoDB database. Click on the Open in a new window icon next to the URL field to view the guestbook app in a new browser tab.","title":"Install and run the application"},{"location":"modules/toolset/crw/lab-1/explore-crw/#verify-data-in-mongodb-database","text":"Data can viewed using the MongoDB client CLI or a UI tool such as MongoDB Compass. Open the mongo terminal in the workspace by clicking the >_ New terminal under mongo . Run the following commands: Get the mongo shell version mongo --version Connect to the database: mongo \"mongodb://user:password@localhost:27017/guestbook\" Show database collections: show collections View data in the collection: db.messages.find({})","title":"Verify data in MongoDB database"},{"location":"modules/toolset/crw/lab-1/explore-crw/#run-the-project-in-the-debug-mode","text":"Open the file app.js and set the break-point at line 48 as shown below in the router.post function. Selecting Debug > Start Debuggin from the menu. This switches the editor in debug mode by opening all the associated views. Enter test data in the guestbook app and submit the form. The debugger should pause at the set breakpoint. Add the variable \"name\" as the watch expression and click on Set over icon in the debug panel. The screen below shows the outcome of the above steps. Finally, click on the continue icon and then to stop icon to finish debugging.","title":"Run the project in the debug mode"},{"location":"modules/toolset/crw/lab-1/explore-crw/#make-code-changes","text":"Open the file views > home.pug and change the title header My Guestbook to My Guestbook with CRW . Rerun the application to view the changes in the preview panel.","title":"Make code changes"},{"location":"modules/toolset/crw/lab-1/explore-crw/#git-operations","text":"The Git features in the Theia editor works the same way as it does in the VSCode editor. Git commands can be run from the UI or builtin command palette or the nodejs terminal. We will use the UI for this exercise. Swith to the git view by selecting the git icon from the left navigation. The change list should show two files. Hover over the messages.js file and click on the discard changes icon. Confirm to discard changes. This leaves with one file with code changes. Hover over the file home.pug and click on the + icon to stage changes. Click on the Commit icon, type in a commit message and press enter. Use the drop down menu to select Push to and select the branch origin . Enter your git userid and password. Verify the changes in the git repository.","title":"Git Operations"},{"location":"modules/toolset/crw/lab-1/explore-crw/#setup-git-configuration","text":"Open File > Settings > Open Preferences > Git from the menu. Right click on the properties user.email and user.name and select Add value . Enter the email id and name used by your git account. These settings take effect at global level and will apply to all the new workspaces.","title":"Setup Git configuration"},{"location":"modules/toolset/crw/lab-1/explore-crw/#summary","text":"Thislab demonstrated how CodeReady workspaces can be an alternate development environtment for enterprises.","title":"Summary"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/","text":"Exercise: Developing with CodeReady workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Create your CodeReady Workspace \u00b6 Fork this Git repo from the Git repo link given below into your private Git account. A complete set of Che samples projects can be found here . https://github.com/redhatmarketplace/nodejs-mongodb-sample.git Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the NodeJS MongoDB sample application stack. Click on Add Workspace . Enter the name of the your wortspace: node-mongo-webapp Select NodeJS MongoDB Web Application from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/nodejs-mongodb-sample.git Add the project and Click CREATE & OPEN . The workspace should open once it is created. [Note: Images for the workspaces (plugin broker, plugin artifacts) are pulled and conatiers are created. Plugin extensions are downloaded and installed. Images required for the configured stack (JWT proxy, MongoDB, NodeJS) is pulled. The workspace can about 2-5 minutes to startup.] Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under nodejs-mongodb-sample project. Navigate and open the app.js file: Notice that the Che Theia editor has idenfitifed the project as a NodeJS project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar. Commands \u00b6 Click on My Workspace: Workspace icon on the right of the editor to view the list of available runtime runtime and plugin commands. [Also available via menu: View > Open View > Workspace ] Using the terminal \u00b6 Note that there are three commands are available under nodejs . Click on >_ New terminal to open a command terminal build into the editor. Run the commands as shown below: cd nodejs-mongodb-sample ls -al node --version You could run an npm install from the command terminal to build the application, however, let's add a new command to build the application. Install and run the application \u00b6 Open the file routes > messages.js and replace the mongodb configuration values with the credentials provided by the instructor. [ USERNAME, PASSWORD & SERVERNAME] Run the guestbook application by clicking on run the application from the list of workspace commands. This triggers a build with the npm install command. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. This opens the Guestbook application in the preview panel. Enter data to see the messages show up in the guesbook. Note that the data entered here is being peristed in the MongoDB database. Click on the Open in a new window icon next to the URL field to view the guestbook app in a new browser tab. Verify data in MongoDB database \u00b6 Data can viewed using the MongoDB CLI client or a UI tool such as MongoDB Compass. TODO: Add insturctions to view the data using the CLI Run the project in the debug mode \u00b6 Open the file app.js and set the break point at line 48 as shown below in the router.post function. Selecting Debug > Start Debuggin from the menu. This switches the editor in debug mode by opening all the associcated views. Enter test data in the guestbook app and submit the form. The debugger should pause at the set breakpoint. Add the variable name as the watch expression and click on Set over icon in the debug panel. The screen below shows the outcome of the above steps. Finally, click on the continue icon and then to stop icon to finish debugging. Summary \u00b6 In summary, this demonstrates how to debug this nodejs application. ...","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#exercise-developing-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode.","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#create-your-codeready-workspace","text":"Fork this Git repo from the Git repo link given below into your private Git account. A complete set of Che samples projects can be found here . https://github.com/redhatmarketplace/nodejs-mongodb-sample.git Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#create-a-new-workspace","text":"Create a new workspace using the NodeJS MongoDB sample application stack. Click on Add Workspace . Enter the name of the your wortspace: node-mongo-webapp Select NodeJS MongoDB Web Application from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/nodejs-mongodb-sample.git Add the project and Click CREATE & OPEN . The workspace should open once it is created. [Note: Images for the workspaces (plugin broker, plugin artifacts) are pulled and conatiers are created. Plugin extensions are downloaded and installed. Images required for the configured stack (JWT proxy, MongoDB, NodeJS) is pulled. The workspace can about 2-5 minutes to startup.]","title":"Create a new workspace"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under nodejs-mongodb-sample project. Navigate and open the app.js file: Notice that the Che Theia editor has idenfitifed the project as a NodeJS project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar.","title":"Explore Che-Theia editor"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#commands","text":"Click on My Workspace: Workspace icon on the right of the editor to view the list of available runtime runtime and plugin commands. [Also available via menu: View > Open View > Workspace ]","title":"Commands"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#using-the-terminal","text":"Note that there are three commands are available under nodejs . Click on >_ New terminal to open a command terminal build into the editor. Run the commands as shown below: cd nodejs-mongodb-sample ls -al node --version You could run an npm install from the command terminal to build the application, however, let's add a new command to build the application.","title":"Using the terminal"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#install-and-run-the-application","text":"Open the file routes > messages.js and replace the mongodb configuration values with the credentials provided by the instructor. [ USERNAME, PASSWORD & SERVERNAME] Run the guestbook application by clicking on run the application from the list of workspace commands. This triggers a build with the npm install command. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. This opens the Guestbook application in the preview panel. Enter data to see the messages show up in the guesbook. Note that the data entered here is being peristed in the MongoDB database. Click on the Open in a new window icon next to the URL field to view the guestbook app in a new browser tab.","title":"Install and run the application"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#verify-data-in-mongodb-database","text":"Data can viewed using the MongoDB CLI client or a UI tool such as MongoDB Compass. TODO: Add insturctions to view the data using the CLI","title":"Verify data in MongoDB database"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#run-the-project-in-the-debug-mode","text":"Open the file app.js and set the break point at line 48 as shown below in the router.post function. Selecting Debug > Start Debuggin from the menu. This switches the editor in debug mode by opening all the associcated views. Enter test data in the guestbook app and submit the form. The debugger should pause at the set breakpoint. Add the variable name as the watch expression and click on Set over icon in the debug panel. The screen below shows the outcome of the above steps. Finally, click on the continue icon and then to stop icon to finish debugging.","title":"Run the project in the debug mode"},{"location":"modules/toolset/crw/lab-1-1/explore-crw-with-rhm-mongodb/#summary","text":"In summary, this demonstrates how to debug this nodejs application. ...","title":"Summary"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/","text":"Exercise: Developing with CodeReady workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create your CodeReady Workspace \u00b6 Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: (takes about 2-5 minutes to startup) TODO: show the pod that runs the workspace. Explore Che-Theia editor \u00b6 Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar. Define and exectue commands from the workspace \u00b6 The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html Run the project in the debug mode \u00b6 Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System . out . println ( \"Testing break point...\" ); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI. Push the code changes back in the Git repo \u00b6 Commit changes Push changes Customize workspace to meet your project requirements \u00b6 Use of factory to share workspaces with your development team \u00b6","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#exercise-developing-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Create a workspace from an existing Github repo using the Spring boot runtime. Explore the Che-Theia editor. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Exercise: Developing with CodeReady workspaces"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#create-your-codeready-workspace","text":"Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#create-a-new-workspace","text":"Create a new workspace using the Springboot stack. Enter the name of the your wortspace: userXX-springboot Select Java Spring Boot from the list of available stacks. Click the Remove button to delete the default project. Add or Import Project , select the Git tab and then add the repo URL you forked earlier. https://github.com/<username>/rhoar-backend Add the project and Click CREATE & OPEN . The workspace should open once its created: (takes about 2-5 minutes to startup) TODO: show the pod that runs the workspace.","title":"Create a new workspace"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#explore-che-theia-editor","text":"Click on the Explorer: /Projects icon to view the files under spring-boot-http-booster project. Navigate and open the java file: src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Notice that the Che Theia editor has idenfitifed the project as a java project and the syntax highlighting is already in place. More about how to use the Theia workspace can be found here To view the installed plugins select View > Plugins and apply filter by selecting Show Installed Plugins from the seach bar.","title":"Explore Che-Theia editor"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#define-and-exectue-commands-from-the-workspace","text":"The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Let's start with the build. Click in View > Workspace to view the list of available runtime commands. Click on build under User Runtimes > maven > build Run the project by clicking run from the workspace. Click Open link when the dialog pops up asking confirmation to luanch the preview pane. Click on 8080/tcp from the User Runtimes to open the application in a new tab. Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html","title":"Define and exectue commands from the workspace"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#run-the-project-in-the-debug-mode","text":"Open the file ExampleApplication.java src/main/java/dev/snowdrop/exmaple/service/ExampleApplication.java Insert a print statement in the method jsonProvider() and set a breakpoint by click next to the line number as show in the picture below: System . out . println ( \"Testing break point...\" ); Open the Output console by selecting View > Output from the menu. Start the application in debug mode by selecting debug from the My Workspace pane on the right. Start the debugger by selecting Debug > Start Debugging from the menu. This should open the Debug view and flow will stop at the set break point. Step over the code using the controls available in the debug page. Open the link to launch the preview of the UI.","title":"Run the project in the debug mode"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#push-the-code-changes-back-in-the-git-repo","text":"Commit changes Push changes","title":"Push the code changes back in the Git repo"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#customize-workspace-to-meet-your-project-requirements","text":"","title":"Customize workspace to meet your project requirements"},{"location":"modules/toolset/crw/lab-1-2/explore-crw2.0-with-springboot/#use-of-factory-to-share-workspaces-with-your-development-team","text":"","title":"Use of factory to share workspaces with your development team"},{"location":"modules/toolset/crw/lab-2/build-with-crw/","text":"Lab 2: Source code control with CodeReady Workspaces \u00b6 In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Complete lab 1 to continue with lab2. Make code changes Undo code changes Commit code changes Pull code changes Explore the Workspaces \u00b6 TODO: show the pod that runs the workspace. Make code changes \u00b6 Open the file views > home.pug and change the title header My Guestbook to My Guestbook with CRW . Rerun the application to view the changes in the preview panel. Git Operations \u00b6 The Git features in the Theia editor works the same way as it does in the VSCode editor. Git commands can be run from the UI or builtin command palette or the nodejs terminal. We will use the UI for this exercise. Swith to the git view by selecting the git icon from the left navigation. The change list should show two files. Hover over the messages.js file and click on the discard changes icon. Confirm to discard changes. This leaves with one file with code changes. Hover over the file home.pug and click on the + icon to stage changes. Click on the Commit icon, type in a commit message and press enter. Use the drop down menu to select Push to and select the branch origin . Enter your git userid and password. Verify the changes in the git repository. Setup Git configuration \u00b6 Open File > Settings > Open Preferences > Git from the menu. Right click on the properties user.email and user.name and select Add value . Enter the email id and name used by your git account. These settings take effect at global level and will apply to all the new workspaces. Define and exectue commands from the workspace \u00b6 The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift . Add a new command \u00b6 Open the tasks.json file from the file explorer view. Copy the json snippet to add the command to run the build. { \"type\" : \"che\" , \"label\" : \"build the application\" , \"command\" : \"npm install \" , \"target\" : { \"workingDir\" : \"${CHE_PROJECTS_ROOT}/nodejs-mongodb-sample\" , \"component\" : \"nodejs\" } } Make more code changes \u00b6 Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html Push the code changes back in the Git repo \u00b6 Commit changes Push changes Customize workspace to meet your project requirements \u00b6 Use of factory to share workspaces with your development team \u00b6 Create your CodeReady Workspace \u00b6 Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below: Create a new workspace \u00b6 Create a new workspace using the Springboot stack. Add Git repo and Click CREATE & OPEN Add or Import Project , select Git and the repo URL you forked earlier. https://github.com/<username>/rhoar-backend And fill it out something like this. You will see this will not result in a new build. If you want to start a manual build you can do so by clicking Start Build . We will skip this for now and move on to the webhook part.","title":"Lab 2: Source code control with CodeReady Workspaces"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#lab-2-source-code-control-with-codeready-workspaces","text":"In this exercise, you will learn how to use Red Hat CodeReady Workspace covering the following topics: Complete lab 1 to continue with lab2. Make code changes Undo code changes Commit code changes Pull code changes","title":"Lab 2: Source code control with CodeReady Workspaces"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#explore-the-workspaces","text":"TODO: show the pod that runs the workspace.","title":"Explore the Workspaces"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#make-code-changes","text":"Open the file views > home.pug and change the title header My Guestbook to My Guestbook with CRW . Rerun the application to view the changes in the preview panel.","title":"Make code changes"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#git-operations","text":"The Git features in the Theia editor works the same way as it does in the VSCode editor. Git commands can be run from the UI or builtin command palette or the nodejs terminal. We will use the UI for this exercise. Swith to the git view by selecting the git icon from the left navigation. The change list should show two files. Hover over the messages.js file and click on the discard changes icon. Confirm to discard changes. This leaves with one file with code changes. Hover over the file home.pug and click on the + icon to stage changes. Click on the Commit icon, type in a commit message and press enter. Use the drop down menu to select Push to and select the branch origin . Enter your git userid and password. Verify the changes in the git repository.","title":"Git Operations"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#setup-git-configuration","text":"Open File > Settings > Open Preferences > Git from the menu. Right click on the properties user.email and user.name and select Add value . Enter the email id and name used by your git account. These settings take effect at global level and will apply to all the new workspaces.","title":"Setup Git configuration"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#define-and-exectue-commands-from-the-workspace","text":"The Devfile defines the configuration of the workspace including the command definitions. Note the commands are defined for build, run, debug, test, dependency-anaysis, deploy to OpenShift .","title":"Define and exectue commands from the workspace"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#add-a-new-command","text":"Open the tasks.json file from the file explorer view. Copy the json snippet to add the command to run the build. { \"type\" : \"che\" , \"label\" : \"build the application\" , \"command\" : \"npm install \" , \"target\" : { \"workingDir\" : \"${CHE_PROJECTS_ROOT}/nodejs-mongodb-sample\" , \"component\" : \"nodejs\" } }","title":"Add a new command"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#make-more-code-changes","text":"Open the static resource file index.html file and update the text. Change the greetings by adding the text CodeReady workspaces , save the file and refresh the preview page to see the changes. src/main/resources/static/index.html","title":"Make more code changes"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#push-the-code-changes-back-in-the-git-repo","text":"Commit changes Push changes","title":"Push the code changes back in the Git repo"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#customize-workspace-to-meet-your-project-requirements","text":"","title":"Customize workspace to meet your project requirements"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#use-of-factory-to-share-workspaces-with-your-development-team","text":"","title":"Use of factory to share workspaces with your development team"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#create-your-codeready-workspace","text":"Fork this Git repo into your priate account. https://github.com/rojanjose/rhoar-backend Note: This repository was created using the Red Hat Developer Launcher tool . Access your CodeReady Workspace using the link provied by the instrcutor. You should see a screen as shown below:","title":"Create your CodeReady Workspace"},{"location":"modules/toolset/crw/lab-2/build-with-crw/#create-a-new-workspace","text":"Create a new workspace using the Springboot stack. Add Git repo and Click CREATE & OPEN Add or Import Project , select Git and the repo URL you forked earlier. https://github.com/<username>/rhoar-backend And fill it out something like this. You will see this will not result in a new build. If you want to start a manual build you can do so by clicking Start Build . We will skip this for now and move on to the webhook part.","title":"Create a new workspace"},{"location":"modules/toolset/crw/lab-3/publish-workspaces/","text":"Lab 3: Publishing Workspaces \u00b6 Create a workspace from an existing Github repo using the Spring boot stack. Use the Eclipse Che - Theia based editor to make code changes. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create a workspace from an existing Github repo using the Spring boot stack. Set up Git configuration. Make code changes. Test Code changes. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Lab 3 Sharing Workspaces"},{"location":"modules/toolset/crw/lab-3/publish-workspaces/#lab-3-publishing-workspaces","text":"Create a workspace from an existing Github repo using the Spring boot stack. Use the Eclipse Che - Theia based editor to make code changes. Define and exectue commands from the workspace. Run the project in the debug mode. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team. Create a workspace from an existing Github repo using the Spring boot stack. Set up Git configuration. Make code changes. Test Code changes. Push the code changes back in the Git repo. Customize workspace to meet your project requirements. Use of factory to share workspaces with your development team.","title":"Lab 3: Publishing Workspaces"},{"location":"workshop-resources/admin-guide/","text":"Instructor Guide \u00b6 This section is comprised of the following steps: Instructor Step 1. Instructor Step \u00b6 Things specific to instructors can go here.","title":"Instructor Guide"},{"location":"workshop-resources/admin-guide/#instructor-guide","text":"This section is comprised of the following steps: Instructor Step","title":"Instructor Guide"},{"location":"workshop-resources/admin-guide/#1-instructor-step","text":"Things specific to instructors can go here.","title":"1. Instructor Step"}]}